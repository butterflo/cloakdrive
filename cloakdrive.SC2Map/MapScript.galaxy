//==================================================================================================
// 
// Generated Map Script
// 
// Name:   CLOAKDRIVE
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library: STARCODE v1.4
//--------------------------------------------------------------------------------------------------
// Function Declarations
void lib1_gf_StarcodeStartCode ();
void lib1_gf_StarcodeStoreIntegerValue (int lp_value, int lp_maximumValue);
void lib1_gf_StarcodeSetCode (string lp_code);
void lib1_gf_StarcodeSetEncryptionAlphabet (string lp_string);
string lib1_gf_StarcodeGetCode ();
int lib1_gf_StarcodeGetIntegerValue (int lp_maximumValue);
string lib1_gf_StarcodeEncryptString (string lp_toEncrypt, string lp_key);
string lib1_gf_StarcodeCompressString (string lp_toCompress);
string lib1_gf_StarcodeHashString (string lp_toHash, int lp_securityLevel);
string lib1_gf_StarcodeRemoveHashfromString (string lp_string, int lp_securityLevel);
bool lib1_gf_StarcodeValidateString (string lp_toCheck, int lp_securityLevel);
string lib1_gf_StarcodeDecryptString (string lp_toDecrypt, string lp_key);
string lib1_gf_StarcodeDecompressString (string lp_toDecompress);

//--------------------------------------------------------------------------------------------------
// Library: STARCODE v1.4
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Source
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.4 ===================
//===========================================================
//  by s3rius
 
 
string STARCODE_Alphabet="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%/()=?,.-;:_^#+* @{[]}|~`"; //
int STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
string STARCODE_CurrentCode="0";
string STARCODE_fill(string s, int i){
    int c=i-StringLength(s);
    string t="";
    while(c>0){
        t+="0";
        c-=1;
    }
    return t+s;
}
string STARCODE_cut(string s){
    int i=1;
    while(i<StringLength(s) && StringSub(s,i,i)=="0"){
        i+=1;
    }
    return StringSub(s,i,StringLength(s));
}
string STARCODE_BigNumAdd(string number, string addition){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int la=StringLength(addition);
    string out="";
    if(la>ln){
        number=STARCODE_fill(number, la);
        ln=la;
    }else if(ln>la){
        addition=STARCODE_fill(addition, ln);
        la=ln;
    }
 
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) + StringToInt( StringSub(addition, la-i,la-i) );
        out=IntToString( (c+carry) % 10 ) +out;
        carry=(c+carry) / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    return out;
}
string STARCODE_BigNumSubtract(string number, string subtraction){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ls=StringLength(subtraction);
    string out="";
    if(ls>ln){
        number=STARCODE_fill(number, ls);
        ln=ls;
    }else if(ln>ls){
        subtraction=STARCODE_fill(subtraction, ln);
        ls=ln;
    }
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) - StringToInt( StringSub(subtraction, ls-i,ls-i) );
        c-=carry;
        if(c<0){
            carry=1;
            c+=10;
        }else{
            carry=0;
        }
        out=IntToString( c ) +out;
        i+=1;
    }
    //if (carry>0){
        //debug("This bigint is not suited for negative numbers!");
    //}
    out=STARCODE_cut(out);
    //debug(out);
    return out;
}
string STARCODE_BigNumMultiply(string number, string multi){
    int i=0;
    int m=StringToInt(multi);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int lm=StringLength(multi);
    string out="";
    while(i<ln){
        c=(StringToInt(StringSub(number, ln-i,ln-i)) * m)+carry;
        out=IntToString( (c % 10) ) +out;
        carry=c / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    if(multi=="0"){
        out="0";
    }
    //debug(out);
    return out;
}
string STARCODE_BigNumDivive(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        out+=IntToString( c / d );
        carry=c % d;
        i+=1;
    }
    if (carry>0){
        //debug("Left: "+IntToString(carry));
    }
    out=STARCODE_cut(out);
    //debug(out);
    return out;
}
string STARCODE_BigNumModulo(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        carry=c % d;
        i+=1;
    }
    //debug(IntToString(carry));
    return IntToString(carry);
}
string STARCODE_BigNumPower(string number, int pow){
    string out=number;
    if (pow>0){
        while(pow>1){
            out=STARCODE_BigNumMultiply(out, number);
            pow-=1;
        }
        return out;
    }else{
        return "1";
    }
}
string STARCODE_Encode(string s, int i, int max){
    return STARCODE_BigNumAdd(STARCODE_BigNumMultiply(s, IntToString(max)), IntToString(i));
}
int STARCODE_Decode(string s, int max){
    return StringToInt(STARCODE_BigNumModulo(s, IntToString(max)));
}
string STARCODE_Decode2(string s, int max){
    return STARCODE_BigNumDivive(s, IntToString(max));
}
string STARCODE_chr(int i){
    return StringSub(STARCODE_Alphabet, i+1,i+1);
}
int STARCODE_ord(string i){
    return StringFind(STARCODE_Alphabet, i, c_stringCase)-1;
}
string STARCODE_shiftForward(string s, string k){
    return STARCODE_chr((STARCODE_ord(s)+STARCODE_ord(k)) % STARCODE_AlphabetLength);
}
string STARCODE_shiftBackward(string s, string k){
    int c=STARCODE_ord(s)-STARCODE_ord(k);
    if (c<0){
        return STARCODE_chr((c+STARCODE_AlphabetLength)%STARCODE_AlphabetLength);
    }
    else{
        return STARCODE_chr(c % STARCODE_AlphabetLength);
    }
}
string STARCODE_Encrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftForward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Decrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftBackward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Base10ToN(string current, int baseN){
    string n=IntToString(baseN);    
    string remainder="";
    string out="";
    
    while (current!="0"){
        remainder=STARCODE_BigNumModulo(current, n);
        out= STARCODE_chr(StringToInt(remainder)) + out;
        current=STARCODE_BigNumDivive(current, n);
    }
    return out;
}
string STARCODE_BaseNTo10(string current, int baseN){
    string out="0";
    string base=IntToString(baseN);
    int l=StringLength(current);
    int i=1;
    while(i<=l){
        out=STARCODE_BigNumAdd(out, STARCODE_BigNumMultiply(STARCODE_BigNumPower(base, l-i), IntToString(STARCODE_ord(StringSub(current, i,i)))) );
        i+=1;
    }
    return out;
}
string STARCODE_Hash(string toHash, int keyLength){
    int i=StringLength(toHash);
    string out="0";
    while(i>0){
        out=STARCODE_BigNumAdd(out, IntToString(  STARCODE_ord(StringSub(toHash,i,i)) * i  ));
        i-=1;
    }
    
    return STARCODE_fill(STARCODE_Base10ToN(STARCODE_BigNumModulo(out, IntToString( FixedToInt(Pow(STARCODE_AlphabetLength, keyLength)) )), STARCODE_AlphabetLength), keyLength);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: READ ME
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.4 ===================
//===========================================================
//  by s3rius
//
//    
//    SC2Mapster.com
//    http://forums.sc2mapster.com/development/galaxy-scripting-and-trigger-lib/5091-library-starcode-v1-3/
//    Credits to vjeux
//
//
//  DOCUMENTATION:
//
//  Before you start using STARCODE you should know a couple of things:
//
//    1) STARCODE is still somewhat experimental. There could very well be bugs 
//       or glitches left in the system. During my tests I have fixed everything
//       I noticed, but that is no guarantee that it's always work under every 
//       circumstances. The system is rather messy too.
//       I haven't noticed any lags during my tests, but I believe that it could be
//       quite a bit faster with optimized functions.
//       Not my problem, at the moment.
//
//    2) I have tested STARCODE with dozens of integer values and generated codes of
//       up to 100 digits length without problems. After that, however, the system 
//       often hits StarCraft II's execution limit. Since I cannot disable this limit
//       you should try not to make codes longer than 100 digits.
//       You can, however, just create several codes with 100 digits length each.
//
//    3) The generated code length can change, even if you haven't added or removed any
//       integers. 
//       That is because the closer an integer's value is to it's maximum value, the more
//       space it needs in the code.
//       So to get the maximum code length you have to set all stored integer's values to
//       their respective maximum values.
//       Keep this in mind when you are storing your codes in a bank.
//       When the codes' length is already close to the maximum size of the bank, you should
//       check whether the code can possibly exceed the bank size.
//
//    4) There is a public function called Set Encryption Alphabet.
//       You should leave this function alone, unless you have a good reason to use it and know
//       what you are doing.
//       One reason could be to remove some characters from the alphabet so that they
//       won't be used in the code anymore.
//       The default alphabet is:
//
//       "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%&/()=?,.-;:_^#+*' @{[]}|>"
//
//       You can add and remove characters as you like. However, you should always keep the first
//       ten characters (all numbers) at it's place, or some functions might return strange
//       results.
//       Also note that I have excluded "<" and "\" from the alphabet.
//       "\" is an escape characters so it's of no use to us.
//       "<" could be potentially dangerous. If you want to display your code and there happens
//       to be a sequence such as "<abc>" in there, StarCraft II will recongize this as a tag
//       and not display it. Thus you would get wrong results. I left ">" in because it won't
//       cause any harm on it's own.
//
//
//  Ok, I think I have mentioned everything. 
//  You can take a look at the Example Usage trigger to see how STARCODE can be used.
//
//  
//
// ~ s3rius
//

void lib1_InitCustomScript () {
}

// Functions
void lib1_gf_StarcodeStartCode () {
    // Automatic Variable Declarations
    // Implementation
        STARCODE_CurrentCode = "0";
}

void lib1_gf_StarcodeStoreIntegerValue (int lp_value, int lp_maximumValue) {
    // Automatic Variable Declarations
    // Implementation
    if(lp_value<lp_maximumValue+1){
        STARCODE_CurrentCode=STARCODE_Encode(STARCODE_CurrentCode, lp_value, lp_maximumValue+1);
    }else{
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Error! Starcode tried to save a value larger than it's maximum!"));
    }
}

void lib1_gf_StarcodeSetCode (string lp_code) {
    // Automatic Variable Declarations
    // Implementation
    STARCODE_CurrentCode=lp_code;
}

void lib1_gf_StarcodeSetEncryptionAlphabet (string lp_string) {
    // Automatic Variable Declarations
    // Implementation
    STARCODE_Alphabet=lp_string;
    STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
}

string lib1_gf_StarcodeGetCode () {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_CurrentCode;
}

int lib1_gf_StarcodeGetIntegerValue (int lp_maximumValue) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_i=STARCODE_Decode(STARCODE_CurrentCode, lp_maximumValue+1);
    STARCODE_CurrentCode=STARCODE_Decode2(STARCODE_CurrentCode, lp_maximumValue+1); //advance in the code
    return lv_i;
}

string lib1_gf_StarcodeEncryptString (string lp_toEncrypt, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Encrypt(lp_toEncrypt, lp_key);
}

string lib1_gf_StarcodeCompressString (string lp_toCompress) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Base10ToN(lp_toCompress, STARCODE_AlphabetLength);
}

string lib1_gf_StarcodeHashString (string lp_toHash, int lp_securityLevel) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Hash(lp_toHash, lp_securityLevel)+lp_toHash;
}

string lib1_gf_StarcodeRemoveHashfromString (string lp_string, int lp_securityLevel) {
    // Automatic Variable Declarations
    // Implementation
    return StringSub(lp_string,lp_securityLevel+1, StringLength(lp_string));
}

bool lib1_gf_StarcodeValidateString (string lp_toCheck, int lp_securityLevel) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Hash(StringSub(lp_toCheck,lp_securityLevel+1, StringLength(lp_toCheck)), lp_securityLevel)==StringSub(lp_toCheck,1, lp_securityLevel);
}

string lib1_gf_StarcodeDecryptString (string lp_toDecrypt, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Decrypt(lp_toDecrypt, lp_key);
}

string lib1_gf_StarcodeDecompressString (string lp_toDecompress) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_BaseNTo10(lp_toDecompress, STARCODE_AlphabetLength);
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitCustomScript();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_aI_max_pois = 3;
const int gv_aI_max_number_of_threads = 256;
const int gv_const_maxdisc = 7;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_DISC {
    string[7] lv_dummy_array;
    int[gv_const_maxdisc + 1] lv_playcount;
    int[gv_const_maxdisc + 1] lv_playerhandle;
    int[gv_const_maxdisc + 1] lv_wincount;
    int[gv_const_maxdisc + 1] lv_killcount;
    int[gv_const_maxdisc + 1] lv_deathcount;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_ai_active;
int gv_host;
playergroup gv_active_players;
int gv_box_setup_values;
int gv_box_setup_info;
int gv_btn_start;
actor gv_sPACE;
string gv_colormessage;
int gv_spacecolor;
int gv_map_box;
bool gv_tutorial;
fixed[gv_const_maxdisc + 1] gv_bar_size;
int gv_bar_box;
int gv_bar;
int gv_bar_txt;
int[11] gv_banshee_worth;
int gv_const_income_multiplier;
int[6] gv_const_tierunit_worth;
unit[gv_const_maxdisc + 1] gv_base_array;
bool[12] gv_base_is_active;
bool[gv_const_maxdisc + 1] gv_masscloak_tip;
bool[gv_const_maxdisc + 1] gv_specialunit_tip;
bool[gv_const_maxdisc + 1] gv_orbital_tip;
bool[gv_const_maxdisc + 1] gv_turbine_tip;
bool gv_tier5_unit_respawn_tip;
unitgroup[gv_const_maxdisc + 1] gv_guerilla_ready_units;
int[gv_const_maxdisc + 1] gv_carrier_bounty;
int[gv_const_maxdisc + 1] gv_carrier_bounty_increment;
bool[gv_const_maxdisc + 1] gv_aI_controller;
point[gv_const_maxdisc + 1][gv_aI_max_pois + 1] gv_aI_attack_poi;
point[gv_const_maxdisc + 1][gv_aI_max_pois + 1] gv_aI_safe_poi;
region gv_blackhole_map;
int gv_aI_number_of_threads_global_counter;
point[gv_const_maxdisc + 1] gv_regen_point;
bool[gv_const_maxdisc + 1] gv_timer_break_flag;
bool[gv_const_maxdisc + 1] gv_exit_flag;
int[gv_const_maxdisc + 1] gv_player_board_idx;
int gv_board;
int[gv_const_maxdisc + 1] gv_player_stats_kill;
int[gv_const_maxdisc + 1] gv_player_stats_death;
text[gv_const_maxdisc + 1] gv_player_tags;
bool gv_gameover_flag;
int gv_purge_type;
timer gv_purge_timer;
point[gv_const_maxdisc + 1] gv_rally_location;
bool[gv_const_maxdisc + 1] gv_rally_flag;
gs_DISC gv_disc;
bank[gv_const_maxdisc + 1] gv_disc_array;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_i1;

    gv_host = 1;
    gv_active_players = PlayerGroupEmpty();
    gv_box_setup_values = c_invalidDialogId;
    gv_box_setup_info = c_invalidDialogId;
    gv_btn_start = c_invalidDialogControlId;
    gv_colormessage = "";
    gv_spacecolor = 1;
    gv_map_box = c_invalidDialogId;
    gv_tutorial = true;
    gv_bar_box = c_invalidDialogId;
    gv_bar = c_invalidDialogControlId;
    gv_bar_txt = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_banshee_worth[init_i] = 7;
    }
    gv_const_income_multiplier = 8;
    for (init_i = 0; init_i <= gv_const_maxdisc; init_i += 1) {
        gv_guerilla_ready_units[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_const_maxdisc; init_i += 1) {
        gv_carrier_bounty_increment[init_i] = 1;
    }
    for (init_i = 0; init_i <= gv_const_maxdisc; init_i += 1) {
        for (init_j = 0; init_j <= gv_aI_max_pois; init_j += 1) {
            gv_aI_attack_poi[init_i][init_j] = RegionRandomPoint(RegionEntireMap());
        }
    }
    for (init_i = 0; init_i <= gv_const_maxdisc; init_i += 1) {
        for (init_j = 0; init_j <= gv_aI_max_pois; init_j += 1) {
            gv_aI_safe_poi[init_i][init_j] = RegionRandomPoint(RegionEntireMap());
        }
    }
    gv_blackhole_map = RegionEmpty();
    gv_board = c_boardNone;
    gv_purge_type = RandomInt(1, 3);
    gv_purge_timer = TimerCreate();
    for (init_i = 0; init_i <= gv_const_maxdisc; init_i += 1) {
        gv_rally_location[init_i] = RegionRandomPoint(RegionEntireMap());
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        gv_disc.lv_dummy_array[init_i1] = "";
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
string gf_spacecolor (int lp_color);
point gf_get_randompoint_far (point lp_point_from);
void gf_cloakdrive_send_unit (unit lp_u, fixed lp_angle, fixed lp_distance);
void gf_cloakdrive_send_unit_turbine (unit lp_u, fixed lp_angle, fixed lp_distance);
void gf_cloakturbine_alarm (int lp_p, point lp_location);
void gf_HQ_warp_voice (unit lp_u);
void gf_HQ_inbound_alarm (int lp_p, point lp_location);
void gf_solaris_alarm (int lp_p, point lp_location);
void gf_postproduction_techunits (unit lp_u);
int gf_get_offense_level (unitgroup lp_uG);
int gf_get_threat_level_of_area (point lp_location, fixed lp_radius, int lp_player);
int gf_get_offense_level_of_massattack (point lp_location, fixed lp_radius, int lp_player);
point gf_get_location_with_variance (point lp_location, fixed lp_radius);
bool gf_get_route_safety (point lp_source, point lp_target);
point gf_get_moveto_location_with_detour (point lp_source, int lp_p, point lp_target, bool lp_use_cloakdrive, bool lp_ignore_blackhole);
void gf_AI_activate ();
void gf_AI_update_poi (int lp_p, bool lp_force_reset);
void gf_AI_build_units (int lp_p);
void gf_AI_attempt_singlemove (unit lp_u, point lp_destination, bool lp_use_cloakdrive, bool lp_ignore_blackhole);
void gf_AI_attempt_switchweapon (unit lp_u);
void gf_AI_request_rescue (unit lp_u_target);
void gf_AI_command_units (int lp_p);
void gf_AI_attempt_upgrade (int lp_p);
void gf_AI_attempt_guerilla (int lp_p, point lp_target_location, bool lp_is_recall_for_masstransfer);
void gf_AI_attempt_massattack (int lp_p);
void gf_AI_attempt_attack_rally (int lp_p, int lp_poi);
void gf_AI_attempt_recall_rally (int lp_p);
void gf_AI_singleunit_order (unit lp_u, order lp_order, int lp_repeat, bool lp_queue);
void gf_AI_evade_proactive (int lp_p);
void gf_respawn_carrier (int lp_p, point lp_pL, bool lp_no_delay);
void gf_show_respawn_countdown (int lp_p);
void gf_player_score_update (int lp_a, int lp_p, int lp_bounty_amount);
text gf_player_kda_text (int lp_player);
void gf_showtip (playergroup lp_playergroup, int lp_tip_id);
void gf_purge_killunit (unit lp_u);
void gf_discinit ();
void gf_validate (int lp_i);
void gf_burn (int lp_i);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_init;
trigger gt_init_setupmenu_values;
trigger gt_init_game;
trigger gt_init_tutorial;
trigger gt_tutorial_01;
trigger gt_tutorial_sandbox;
trigger gt_ui_init_hp_bar;
trigger gt_ui_refresh_hp_bar_loop;
trigger gt_ui_refresh_maingame_timer_loop;
trigger gt_upgrade_detect;
trigger gt_cloakdrive_upgrade_detect;
trigger gt_init_constants;
trigger gt_cloakdrive_event;
trigger gt_cloakturbine_charged;
trigger gt_cloakturbine_up;
trigger gt_cloakturbine_dn;
trigger gt_HQ_masswarp;
trigger gt_resistFX;
trigger gt_relay_setup;
trigger gt_relay_cancel;
trigger gt_rift_FX;
trigger gt_inhibitor;
trigger gt_inhibited_FX;
trigger gt_solaris_FX_up;
trigger gt_solaris_FX_dn;
trigger gt_solaris_hits_inhibitor;
trigger gt_postproduction;
trigger gt_abilcheck_loop;
trigger gt_spawn_loop;
trigger gt_tab_press;
trigger gt_tab_exit;
trigger gt_zoom_compensate;
trigger gt_purge_type;
trigger gt_hide_ui1;
trigger gt_hide_ui0;
trigger gt_bholetest;
trigger gt_empty;
trigger gt_get_time;
trigger gt_activate_simulator;
trigger gt_AI_core_loop;
trigger gt_AI_anti_AoE;
trigger gt_AI_tech_unit_timeout;
trigger gt_AI_evade_reactive;
trigger gt_exit;
trigger gt_leaderboard;
trigger gt_unit_destroyed;
trigger gt_bgm_sequence_maingame;
trigger gt_bgm_sequence_tutorial;
trigger gt_purge_sequence;
trigger gt_purge_endgame_countdown;
trigger gt_purge_activate;
trigger gt_purge_activate_FX;
trigger gt_rally_cancel;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
string gf_spacecolor (int lp_color) {
    // Automatic Variable Declarations
    int autoC2B23CAE_val;

    // Implementation
    autoC2B23CAE_val = lp_color;
    if (autoC2B23CAE_val == 1) {
        return ("SetTintColor 32,64,255");
    }
    else if (autoC2B23CAE_val == 2) {
        return ("SetTintColor 128,96,64");
    }
    else if (autoC2B23CAE_val == 3) {
        return ("SetTintColor 1,1,1");
    }
    else {
        return ("");
    }
}

point gf_get_randompoint_far (point lp_point_from) {
    // Variable Declarations
    point lv_location;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_location = RegionRandomPoint(RegionEntireMap());
    while ((DistanceBetweenPoints(lp_point_from, lv_location) < 70.0)) {
        lv_location = RegionRandomPoint(RegionEntireMap());
    }
    return lv_location;
}

trigger auto_gf_cloakdrive_send_unit_Trigger = null;
unit auto_gf_cloakdrive_send_unit_lp_u;
fixed auto_gf_cloakdrive_send_unit_lp_angle;
fixed auto_gf_cloakdrive_send_unit_lp_distance;

void gf_cloakdrive_send_unit (unit lp_u, fixed lp_angle, fixed lp_distance) {
    auto_gf_cloakdrive_send_unit_lp_u = lp_u;
    auto_gf_cloakdrive_send_unit_lp_angle = lp_angle;
    auto_gf_cloakdrive_send_unit_lp_distance = lp_distance;

    if (auto_gf_cloakdrive_send_unit_Trigger == null) {
        auto_gf_cloakdrive_send_unit_Trigger = TriggerCreate("auto_gf_cloakdrive_send_unit_TriggerFunc");
    }

    TriggerExecute(auto_gf_cloakdrive_send_unit_Trigger, false, false);
}

bool auto_gf_cloakdrive_send_unit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_u = auto_gf_cloakdrive_send_unit_lp_u;
    fixed lp_angle = auto_gf_cloakdrive_send_unit_lp_angle;
    fixed lp_distance = auto_gf_cloakdrive_send_unit_lp_distance;

    // Variable Declarations
    int lv_p;
    point lv_destination;

    // Automatic Variable Declarations
    string autoB4FABEED_val;
    int auto9CCD68AB_n;
    int auto9CCD68AB_i;
    string auto74999978_val;

    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(lp_u) == false)) {
        return true;
    }

    lv_p = UnitGetOwner(lp_u);
    lv_destination = PointWithOffsetPolar(UnitGetPosition(lp_u), lp_distance, lp_angle);
    autoB4FABEED_val = UnitGetType(lp_u);
    if (autoB4FABEED_val == "GhostAcademy") {
        gv_base_is_active[lv_p] = false;
    }
    else {
    }
    UnitBehaviorRemove(lp_u, "VortexEventHorizon", 1);
    UnitBehaviorAdd(lp_u, "GhostCloak", lp_u, 1);
    auto9CCD68AB_n = RandomInt(32, 40);
    for (auto9CCD68AB_i = 1; auto9CCD68AB_i <= auto9CCD68AB_n; auto9CCD68AB_i += 1) {
        UnitIssueOrder(lp_u, OrderTargetingPoint(AbilityCommand("move", 0), lv_destination), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lp_u) == false)) {
        return true;
    }

    SoundPlayOnUnitForPlayer(SoundLink("Raynor_MorosDeviceStart", -1), c_maxPlayers, PlayerGroupAll(), lp_u, 0.0, 100.0, 0.0);
    UnitSetFacing(lp_u, lp_angle, 0.0);
    UnitBehaviorAdd(lp_u, "Superspeed", lp_u, 1);
    while ((DistanceBetweenPoints(lv_destination, UnitGetPosition(lp_u)) >= 35.0) && (UnitHasBehavior2(lp_u, "Superspeed") == true) && (UnitIsAlive(lp_u) == true)) {
        libNtve_gf_MakeUnitFacePoint(lp_u, lv_destination, 0.0);
        UnitIssueOrder(lp_u, OrderTargetingPoint(AbilityCommand("move", 0), lv_destination), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lp_u) == false)) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("Raynor_MorosDeviceStart2", -1), c_maxPlayers, PlayerGroupAll(), lv_destination, 0.0, 100.0, 0.0);
    SoundPlayAtPointForPlayer(SoundLink("Raynor_MorosDeviceStart", -1), c_maxPlayers, PlayerGroupAll(), lv_destination, 0.0, 100.0, 0.0);
    UnitBehaviorRemove(lp_u, "GhostCloak", 1);
    Wait(0.1, c_timeGame);
    UnitBehaviorRemove(lp_u, "Superspeed", 1);
    if ((UnitHasBehavior2(lp_u, "GhostCloak") == false)) {
        UnitIssueOrder(lp_u, OrderTargetingPoint(AbilityCommand("attack", 0), lv_destination), c_orderQueueReplace);
    }

    auto74999978_val = UnitGetType(lp_u);
    if (auto74999978_val == "GhostAcademy") {
        gv_base_is_active[lv_p] = true;
        UnitIssueOrder(lp_u, Order(AbilityCommand("CancelWaypoint", 0)), c_orderQueueReplace);
    }
    else {
    }
    Wait(1.0, c_timeGame);
    if ((UnitIsAlive(lp_u) == false)) {
        return true;
    }

    UnitBehaviorRemove(lp_u, "CloakspaceTurbineActive", 1);
    return true;
}

trigger auto_gf_cloakdrive_send_unit_turbine_Trigger = null;
unit auto_gf_cloakdrive_send_unit_turbine_lp_u;
fixed auto_gf_cloakdrive_send_unit_turbine_lp_angle;
fixed auto_gf_cloakdrive_send_unit_turbine_lp_distance;

void gf_cloakdrive_send_unit_turbine (unit lp_u, fixed lp_angle, fixed lp_distance) {
    auto_gf_cloakdrive_send_unit_turbine_lp_u = lp_u;
    auto_gf_cloakdrive_send_unit_turbine_lp_angle = lp_angle;
    auto_gf_cloakdrive_send_unit_turbine_lp_distance = lp_distance;

    if (auto_gf_cloakdrive_send_unit_turbine_Trigger == null) {
        auto_gf_cloakdrive_send_unit_turbine_Trigger = TriggerCreate("auto_gf_cloakdrive_send_unit_turbine_TriggerFunc");
    }

    TriggerExecute(auto_gf_cloakdrive_send_unit_turbine_Trigger, false, false);
}

bool auto_gf_cloakdrive_send_unit_turbine_TriggerFunc (bool testConds, bool runActions) {
    unit lp_u = auto_gf_cloakdrive_send_unit_turbine_lp_u;
    fixed lp_angle = auto_gf_cloakdrive_send_unit_turbine_lp_angle;
    fixed lp_distance = auto_gf_cloakdrive_send_unit_turbine_lp_distance;

    // Variable Declarations
    int lv_p;
    point lv_destination;

    // Automatic Variable Declarations
    string auto230491D1_val;
    int auto94480BB1_n;
    int auto94480BB1_i;
    string auto3C80BEE8_val;

    // Variable Initialization

    // Implementation
    lv_p = UnitGetOwner(lp_u);
    lv_destination = PointWithOffsetPolar(UnitGetPosition(lp_u), lp_distance, lp_angle);
    auto230491D1_val = UnitGetType(lp_u);
    if (auto230491D1_val == "GhostAcademy") {
        gv_base_is_active[lv_p] = false;
    }
    else {
    }
    UnitBehaviorRemove(lp_u, "VortexEventHorizon", 1);
    UnitBehaviorAdd(lp_u, "GhostCloak", lp_u, 1);
    libNtve_gf_CreateActorAtPoint("EnergyNovaShockwave2", UnitGetPosition(lp_u));
    libNtve_gf_CreateActorAtPoint("AssemblyDestroyedSoundActorMini", UnitGetPosition(lp_u));
    auto94480BB1_n = RandomInt(32, 40);
    for (auto94480BB1_i = 1; auto94480BB1_i <= auto94480BB1_n; auto94480BB1_i += 1) {
        UnitIssueOrder(lp_u, OrderTargetingPoint(AbilityCommand("move", 0), lv_destination), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_CreateActorAtPoint("EnergyNovaShockwave", UnitGetPosition(lp_u));
    libNtve_gf_CreateActorAtPoint("CarrierDestroyedSoundActor", UnitGetPosition(lp_u));
    UnitBehaviorAdd(lp_u, "CloakspaceTurbineActive2", lp_u, 1);
    SoundPlayOnUnitForPlayer(SoundLink("Raynor_MorosDeviceStart", -1), c_maxPlayers, PlayerGroupAll(), lp_u, 0.0, 100.0, 0.0);
    UnitSetFacing(lp_u, lp_angle, 0.0);
    UnitBehaviorAdd(lp_u, "Superspeed", lp_u, 1);
    while ((DistanceBetweenPoints(lv_destination, UnitGetPosition(lp_u)) >= 35.0) && (UnitHasBehavior2(lp_u, "Superspeed") == true)) {
        libNtve_gf_MakeUnitFacePoint(lp_u, lv_destination, 0.0);
        UnitIssueOrder(lp_u, OrderTargetingPoint(AbilityCommand("move", 0), lv_destination), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
    }
    SoundPlayAtPointForPlayer(SoundLink("Raynor_MorosDeviceStart2", -1), c_maxPlayers, PlayerGroupAll(), lv_destination, 0.0, 100.0, 0.0);
    SoundPlayAtPointForPlayer(SoundLink("Raynor_MorosDeviceStart", -1), c_maxPlayers, PlayerGroupAll(), lv_destination, 0.0, 100.0, 0.0);
    UnitBehaviorRemove(lp_u, "GhostCloak", 1);
    Wait(0.1, c_timeGame);
    UnitBehaviorRemove(lp_u, "Superspeed", 1);
    if ((UnitHasBehavior2(lp_u, "GhostCloak") == false)) {
        UnitIssueOrder(lp_u, OrderTargetingPoint(AbilityCommand("attack", 0), lv_destination), c_orderQueueReplace);
    }

    auto3C80BEE8_val = UnitGetType(lp_u);
    if (auto3C80BEE8_val == "GhostAcademy") {
        gv_base_is_active[lv_p] = true;
        UnitIssueOrder(lp_u, Order(AbilityCommand("CancelWaypoint", 0)), c_orderQueueReplace);
    }
    else {
    }
    Wait(1.0, c_timeGame);
    UnitBehaviorRemove(lp_u, "CloakspaceTurbineActive", 1);
    UnitBehaviorRemove(lp_u, "CloakspaceTurbineActive2", 1);
    libNtve_gf_MakeUnitFacePoint(lp_u, lv_destination, 0.0);
    libNtve_gf_MakeUnitUncommandable(lp_u, true);
    Wait(4.9, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(lp_u, false);
    return true;
}

trigger auto_gf_cloakturbine_alarm_Trigger = null;
int auto_gf_cloakturbine_alarm_lp_p;
point auto_gf_cloakturbine_alarm_lp_location;

void gf_cloakturbine_alarm (int lp_p, point lp_location) {
    auto_gf_cloakturbine_alarm_lp_p = lp_p;
    auto_gf_cloakturbine_alarm_lp_location = lp_location;

    if (auto_gf_cloakturbine_alarm_Trigger == null) {
        auto_gf_cloakturbine_alarm_Trigger = TriggerCreate("auto_gf_cloakturbine_alarm_TriggerFunc");
    }

    TriggerExecute(auto_gf_cloakturbine_alarm_Trigger, false, false);
}

bool auto_gf_cloakturbine_alarm_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_cloakturbine_alarm_lp_p;
    point lp_location = auto_gf_cloakturbine_alarm_lp_location;

    // Variable Declarations
    unitgroup lv_inhibitor_group;
    unit lv_unit;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_inhibitor_group = UnitGroupEmpty();

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/833EE2CD"));
    MinimapPing(PlayerGroupAll(), lp_location, 7.0, Color(100.00, 100.00, 100.00));
    return true;
}

trigger auto_gf_HQ_warp_voice_Trigger = null;
unit auto_gf_HQ_warp_voice_lp_u;

void gf_HQ_warp_voice (unit lp_u) {
    auto_gf_HQ_warp_voice_lp_u = lp_u;

    if (auto_gf_HQ_warp_voice_Trigger == null) {
        auto_gf_HQ_warp_voice_Trigger = TriggerCreate("auto_gf_HQ_warp_voice_TriggerFunc");
    }

    TriggerExecute(auto_gf_HQ_warp_voice_Trigger, false, false);
}

bool auto_gf_HQ_warp_voice_TriggerFunc (bool testConds, bool runActions) {
    unit lp_u = auto_gf_HQ_warp_voice_lp_u;

    // Automatic Variable Declarations
    int auto0C5A695E_val;

    // Implementation
    auto0C5A695E_val = RandomInt(1, 13);
    if (auto0C5A695E_val == 1) {
        SoundPlayOnUnitForPlayer(SoundLink("AICommunication_TerranAICommand_107", -1), UnitGetOwner(lp_u), PlayerGroupSingle(UnitGetOwner(lp_u)), lp_u, 0.0, 100.0, 0.0);
    }
    else if (auto0C5A695E_val == 2) {
        SoundPlayOnUnitForPlayer(SoundLink("AICommunication_TerranAICommand_024", -1), UnitGetOwner(lp_u), PlayerGroupSingle(UnitGetOwner(lp_u)), lp_u, 0.0, 100.0, 0.0);
    }
    else if (auto0C5A695E_val == 3) {
        SoundPlayOnUnitForPlayer(SoundLink("TValerian02BRaynor00010", -1), UnitGetOwner(lp_u), PlayerGroupSingle(UnitGetOwner(lp_u)), lp_u, 0.0, 100.0, 0.0);
    }
    else if (auto0C5A695E_val == 4) {
        SoundPlayOnUnitForPlayer(SoundLink("THorner03Tychus00032", -1), UnitGetOwner(lp_u), PlayerGroupSingle(UnitGetOwner(lp_u)), lp_u, 0.0, 100.0, 0.0);
    }
    else if (auto0C5A695E_val == 5) {
        SoundPlayOnUnitForPlayer(SoundLink("TTosh03BBriefingNova00010", -1), UnitGetOwner(lp_u), PlayerGroupSingle(UnitGetOwner(lp_u)), lp_u, 0.0, 100.0, 0.0);
    }
    else if (auto0C5A695E_val == 6) {
        SoundPlayOnUnitForPlayer(SoundLink("TValerian02ASwann00058", -1), UnitGetOwner(lp_u), PlayerGroupSingle(UnitGetOwner(lp_u)), lp_u, 0.0, 100.0, 0.0);
    }
    else if (auto0C5A695E_val == 7) {
        SoundPlayOnUnitForPlayer(SoundLink("TValerian02ATychus00061", -1), UnitGetOwner(lp_u), PlayerGroupSingle(UnitGetOwner(lp_u)), lp_u, 0.0, 100.0, 0.0);
    }
    else if (auto0C5A695E_val == 8) {
        SoundPlayOnUnitForPlayer(SoundLink("THorner03BriefingTychus00019", -1), UnitGetOwner(lp_u), PlayerGroupSingle(UnitGetOwner(lp_u)), lp_u, 0.0, 100.0, 0.0);
    }
    else if (auto0C5A695E_val == 9) {
        SoundPlayOnUnitForPlayer(SoundLink("HybridDYes", 2), UnitGetOwner(lp_u), PlayerGroupSingle(UnitGetOwner(lp_u)), lp_u, 0.0, 100.0, 0.0);
    }
    else if (auto0C5A695E_val == 10) {
        SoundPlayOnUnitForPlayer(SoundLink("AICommunication_TerranAICommand_261", 0), UnitGetOwner(lp_u), PlayerGroupSingle(UnitGetOwner(lp_u)), lp_u, 0.0, 100.0, 0.0);
    }
    else if (auto0C5A695E_val == 11) {
        SoundPlayOnUnitForPlayer(SoundLink("zMission_Lab02_Lab02Mech_121", 0), UnitGetOwner(lp_u), PlayerGroupSingle(UnitGetOwner(lp_u)), lp_u, 0.0, 100.0, 0.0);
    }
    else if (auto0C5A695E_val == 12) {
        SoundPlayOnUnitForPlayer(SoundLink("zUnit_HeroQueen_zExpedtion03Queen_038", 0), UnitGetOwner(lp_u), PlayerGroupSingle(UnitGetOwner(lp_u)), lp_u, 0.0, 100.0, 0.0);
    }
    else if (auto0C5A695E_val == 13) {
        SoundPlayOnUnitForPlayer(SoundLink("zUnit_TacFighter_TacFighterPilot_005", 0), UnitGetOwner(lp_u), PlayerGroupSingle(UnitGetOwner(lp_u)), lp_u, 0.0, 100.0, 0.0);
    }
    else {
    }
    return true;
}

trigger auto_gf_HQ_inbound_alarm_Trigger = null;
int auto_gf_HQ_inbound_alarm_lp_p;
point auto_gf_HQ_inbound_alarm_lp_location;

void gf_HQ_inbound_alarm (int lp_p, point lp_location) {
    auto_gf_HQ_inbound_alarm_lp_p = lp_p;
    auto_gf_HQ_inbound_alarm_lp_location = lp_location;

    if (auto_gf_HQ_inbound_alarm_Trigger == null) {
        auto_gf_HQ_inbound_alarm_Trigger = TriggerCreate("auto_gf_HQ_inbound_alarm_TriggerFunc");
    }

    TriggerExecute(auto_gf_HQ_inbound_alarm_Trigger, false, false);
}

bool auto_gf_HQ_inbound_alarm_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_HQ_inbound_alarm_lp_p;
    point lp_location = auto_gf_HQ_inbound_alarm_lp_location;

    // Variable Declarations
    unitgroup lv_inhibitor_group;
    unit lv_unit;
    int lv_p;

    // Automatic Variable Declarations
    unitgroup auto52E05EBE_g;
    int auto52E05EBE_u;
    unit auto52E05EBE_var;
    int auto8B48406D_val;

    // Variable Initialization
    lv_inhibitor_group = UnitGroupEmpty();

    // Implementation
    auto52E05EBE_g = UnitGroupSearch("GhostAcademy", lp_p, lp_location, 19.6, UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto52E05EBE_u = UnitGroupCount(auto52E05EBE_g, c_unitCountAll);
    for (;; auto52E05EBE_u -= 1) {
        auto52E05EBE_var = UnitGroupUnitFromEnd(auto52E05EBE_g, auto52E05EBE_u);
        if (auto52E05EBE_var == null) { break; }
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(auto52E05EBE_var)), c_messageAreaSubtitle, StringExternal("Param/Value/0CBE6BDF"));
        MinimapPing(PlayerGroupSingle(UnitGetOwner(auto52E05EBE_var)), lp_location, 7.0, Color(100.00, 100.00, 100.00));
        SoundPlayForPlayer(SoundLink("WidowMine_ArmedBeep", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(auto52E05EBE_var)), 100.0, 0.0);
        auto8B48406D_val = RandomInt(1, 2);
        if (auto8B48406D_val == 1) {
            SoundPlayForPlayer(SoundLink("zCutscene_Zerg03_DeckOfficer3_005", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(auto52E05EBE_var)), 100.0, 0.0);
        }
        else if (auto8B48406D_val == 2) {
            SoundPlayForPlayer(SoundLink("zMission_Space02_Valerian_120", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(auto52E05EBE_var)), 100.0, 0.0);
        }
        else {
        }
    }
    return true;
}

trigger auto_gf_solaris_alarm_Trigger = null;
int auto_gf_solaris_alarm_lp_p;
point auto_gf_solaris_alarm_lp_location;

void gf_solaris_alarm (int lp_p, point lp_location) {
    auto_gf_solaris_alarm_lp_p = lp_p;
    auto_gf_solaris_alarm_lp_location = lp_location;

    if (auto_gf_solaris_alarm_Trigger == null) {
        auto_gf_solaris_alarm_Trigger = TriggerCreate("auto_gf_solaris_alarm_TriggerFunc");
    }

    TriggerExecute(auto_gf_solaris_alarm_Trigger, false, false);
}

bool auto_gf_solaris_alarm_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_solaris_alarm_lp_p;
    point lp_location = auto_gf_solaris_alarm_lp_location;

    // Variable Declarations
    unit lv_unit;
    int lv_p;

    // Automatic Variable Declarations
    unitgroup autoC0BFBCE9_g;
    int autoC0BFBCE9_u;
    unit autoC0BFBCE9_var;

    // Variable Initialization

    // Implementation
    autoC0BFBCE9_g = UnitGroupSearch("GhostAcademy", lp_p, lp_location, 4.9, UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC0BFBCE9_u = UnitGroupCount(autoC0BFBCE9_g, c_unitCountAll);
    for (;; autoC0BFBCE9_u -= 1) {
        autoC0BFBCE9_var = UnitGroupUnitFromEnd(autoC0BFBCE9_g, autoC0BFBCE9_u);
        if (autoC0BFBCE9_var == null) { break; }
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(autoC0BFBCE9_var)), c_messageAreaSubtitle, StringExternal("Param/Value/B2699825"));
        MinimapPing(PlayerGroupSingle(UnitGetOwner(autoC0BFBCE9_var)), lp_location, 7.0, Color(100.00, 100.00, 100.00));
        SoundPlay(SoundLink("WidowMine_ArmedBeep", -1), PlayerGroupSingle(UnitGetOwner(autoC0BFBCE9_var)), 100.0, 0.0);
    }
    Wait(7.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

void gf_postproduction_techunits (unit lp_u) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_p = UnitGetOwner(lp_u);
    libNtve_gf_AttachModelToUnit(lp_u, "GhostEMPAttackImpactEffect", "Ref_Head");
    CameraShakeStart(lv_p, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.7, 4.0, 100.0, 0.1);
    SoundPlayOnUnitForPlayer(SoundLink("Terran_ExplosionLarge", -1), c_maxPlayers, PlayerGroupAll(), lp_u, 0.0, 100.0, 0.0);
    SoundPlayOnUnitForPlayer(SoundLink("InhibitorUberShield", -1), c_maxPlayers, PlayerGroupAll(), lp_u, 0.0, 100.0, 0.0);
    gv_specialunit_tip[lv_p] = false;
    Wait(1.0, c_timeReal);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    libNtve_gf_AttachModelToUnit(lp_u, "TimeWarp", "Ref_Center");
}

int gf_get_offense_level (unitgroup lp_uG) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    unitgroup autoCBA24E35_g;
    int autoCBA24E35_u;
    unit autoCBA24E35_var;
    string auto0F876882_val;

    // Variable Initialization

    // Implementation
    autoCBA24E35_g = lp_uG;
    autoCBA24E35_u = UnitGroupCount(autoCBA24E35_g, c_unitCountAll);
    for (;; autoCBA24E35_u -= 1) {
        autoCBA24E35_var = UnitGroupUnitFromEnd(autoCBA24E35_g, autoCBA24E35_u);
        if (autoCBA24E35_var == null) { break; }
        auto0F876882_val = UnitGetType(autoCBA24E35_var);
        if (auto0F876882_val == "DuskWing") {
            lv_value += gv_banshee_worth[UnitGetOwner(autoCBA24E35_var)];
        }
        else if (auto0F876882_val == "Battlecruiser") {
            lv_value += gv_const_tierunit_worth[2];
        }
        else if (auto0F876882_val == "Raven") {
            lv_value += gv_const_tierunit_worth[3];
        }
        else if (auto0F876882_val == "Liberator") {
            lv_value += gv_const_tierunit_worth[4];
        }
        else if (auto0F876882_val == "LiberatorAG") {
            lv_value += gv_const_tierunit_worth[4];
        }
        else if (auto0F876882_val == "VoidSeeker") {
            lv_value += gv_const_tierunit_worth[5];
        }
        else {
        }
    }
    return lv_value;
}

int gf_get_threat_level_of_area (point lp_location, fixed lp_radius, int lp_player) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    unitgroup autoBECE2E44_g;
    int autoBECE2E44_u;
    unit autoBECE2E44_var;
    string auto15AEFA09_val;

    // Variable Initialization

    // Implementation
    autoBECE2E44_g = UnitGroupSearch(null, lp_player, lp_location, lp_radius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBECE2E44_u = UnitGroupCount(autoBECE2E44_g, c_unitCountAll);
    for (;; autoBECE2E44_u -= 1) {
        autoBECE2E44_var = UnitGroupUnitFromEnd(autoBECE2E44_g, autoBECE2E44_u);
        if (autoBECE2E44_var == null) { break; }
        auto15AEFA09_val = UnitGetType(autoBECE2E44_var);
        if (auto15AEFA09_val == "DuskWing") {
            lv_value += gv_banshee_worth[UnitGetOwner(autoBECE2E44_var)];
        }
        else if (auto15AEFA09_val == "Battlecruiser") {
            lv_value += gv_const_tierunit_worth[2];
        }
        else if (auto15AEFA09_val == "Raven") {
            lv_value += gv_const_tierunit_worth[3];
        }
        else if (auto15AEFA09_val == "Liberator") {
            lv_value += gv_const_tierunit_worth[4];
        }
        else if (auto15AEFA09_val == "LiberatorAG") {
            lv_value += gv_const_tierunit_worth[4];
        }
        else if (auto15AEFA09_val == "VoidSeeker") {
            lv_value += gv_const_tierunit_worth[5];
        }
        else {
        }
    }
    return lv_value;
}

int gf_get_offense_level_of_massattack (point lp_location, fixed lp_radius, int lp_player) {
    // Variable Declarations
    int lv_value;

    // Automatic Variable Declarations
    unitgroup autoAE8AA38C_g;
    int autoAE8AA38C_u;
    unit autoAE8AA38C_var;
    string auto74F11BC6_val;

    // Variable Initialization

    // Implementation
    autoAE8AA38C_g = UnitGroupSearch(null, lp_player, lp_location, lp_radius, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAE8AA38C_u = UnitGroupCount(autoAE8AA38C_g, c_unitCountAll);
    for (;; autoAE8AA38C_u -= 1) {
        autoAE8AA38C_var = UnitGroupUnitFromEnd(autoAE8AA38C_g, autoAE8AA38C_u);
        if (autoAE8AA38C_var == null) { break; }
        auto74F11BC6_val = UnitGetType(autoAE8AA38C_var);
        if (auto74F11BC6_val == "DuskWing") {
            lv_value += gv_banshee_worth[UnitGetOwner(autoAE8AA38C_var)];
        }
        else if (auto74F11BC6_val == "Battlecruiser") {
            lv_value += gv_const_tierunit_worth[2];
        }
        else if (auto74F11BC6_val == "Raven") {
            lv_value += gv_const_tierunit_worth[3];
        }
        else if (auto74F11BC6_val == "Liberator") {
            lv_value += gv_const_tierunit_worth[4];
        }
        else if (auto74F11BC6_val == "LiberatorAG") {
            lv_value += gv_const_tierunit_worth[4];
        }
        else if (auto74F11BC6_val == "VoidSeeker") {
            lv_value += gv_const_tierunit_worth[5];
        }
        else {
        }
    }
    return lv_value;
}

point gf_get_location_with_variance (point lp_location, fixed lp_radius) {
    // Automatic Variable Declarations
    // Implementation
    return RegionRandomPoint(RegionCircle(lp_location, lp_radius));
}

bool gf_get_route_safety (point lp_source, point lp_target) {
    // Variable Declarations
    bool lv_is_not_safe;
    int lv_collision;
    int lv_distance_unit;

    // Automatic Variable Declarations
    int auto784E3D83_ae;
    int auto784E3D83_var;

    // Variable Initialization

    // Implementation
    lv_distance_unit = FixedToInt((DistanceBetweenPoints(lp_source, lp_target) / 4.0));
    auto784E3D83_ae = lv_distance_unit;
    auto784E3D83_var = 1;
    for ( ; auto784E3D83_var <= auto784E3D83_ae; auto784E3D83_var += 1 ) {
        lv_is_not_safe = RegionContainsPoint(gv_blackhole_map, libNtve_gf_PointOffsetTowardsPoint(lp_source, (auto784E3D83_var * 4), lp_target));
        if ((lv_is_not_safe == true)) {
            return false;
        }

    }
    return true;
}

point gf_get_moveto_location_with_detour (point lp_source, int lp_p, point lp_target, bool lp_use_cloakdrive, bool lp_ignore_blackhole) {
    // Variable Declarations
    unit lv_detourunit;
    point lv_return;

    // Automatic Variable Declarations
    unitgroup auto1FF2AA59_g;
    int auto1FF2AA59_u;

    // Variable Initialization

    // Implementation
    if (((gf_get_route_safety(lp_source, lp_target) == true) || (lp_ignore_blackhole == true))) {
        lv_return = lp_target;
    }
    else if ((lp_use_cloakdrive == true)) {
        lv_return = libNtve_gf_RandomPointBetweenPoints(RegionRandomPoint(RegionCircle(lp_source, 28.0)), RegionRandomPoint(RegionCircle(lp_target, 28.0)));
        if ((gf_get_route_safety(lp_source, lv_return) == true) && (gf_get_route_safety(lv_return, lp_target) == true)) {
        }
        else {
            lv_return = null;
            auto1FF2AA59_g = UnitGroup("ArbiterMP", lp_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto1FF2AA59_u = UnitGroupCount(auto1FF2AA59_g, c_unitCountAll);
            for (;; auto1FF2AA59_u -= 1) {
                lv_detourunit = UnitGroupUnitFromEnd(auto1FF2AA59_g, auto1FF2AA59_u);
                if (lv_detourunit == null) { break; }
                if ((UnitHasBehavior2(lv_detourunit, "CloakfieldRelay") == false) && (gf_get_route_safety(lp_source, UnitGetPosition(lv_detourunit)) == true) && (gf_get_route_safety(UnitGetPosition(lv_detourunit), lp_target) == true)) {
                    UnitIssueOrder(lv_detourunit, OrderTargetingPoint(AbilityCommand("ArbiterMPRecall", 0), lp_target), c_orderQueueReplace);
                    lv_return = UnitGetPosition(lv_detourunit);
                    break;
                }

            }
        }
    }
    else if ((lp_use_cloakdrive == false)) {
        lv_return = libNtve_gf_RandomPointBetweenPoints(RegionRandomPoint(RegionCircle(lp_source, 28.0)), RegionRandomPoint(RegionCircle(lp_target, 28.0)));
        if ((gf_get_route_safety(lp_source, lv_return) == true) && (gf_get_route_safety(lv_return, lp_target) == true)) {
        }
        else {
            lv_return = null;
        }
    }
    return lv_return;
}

void gf_AI_activate () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(gt_AI_evade_reactive, true);
    TriggerExecute(gt_AI_core_loop, true, false);
}

trigger auto_gf_AI_update_poi_Trigger = null;
int auto_gf_AI_update_poi_lp_p;
bool auto_gf_AI_update_poi_lp_force_reset;

void gf_AI_update_poi (int lp_p, bool lp_force_reset) {
    auto_gf_AI_update_poi_lp_p = lp_p;
    auto_gf_AI_update_poi_lp_force_reset = lp_force_reset;

    if (auto_gf_AI_update_poi_Trigger == null) {
        auto_gf_AI_update_poi_Trigger = TriggerCreate("auto_gf_AI_update_poi_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_update_poi_Trigger, false, false);
}

bool auto_gf_AI_update_poi_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_AI_update_poi_lp_p;
    bool lp_force_reset = auto_gf_AI_update_poi_lp_force_reset;

    // Variable Declarations
    point lv_candidate_poi;
    int lv_bounty_target;
    unit lv_u;

    // Automatic Variable Declarations
    const int auto28ACA174_ae = gv_aI_max_pois;
    int auto28ACA174_var;

    // Variable Initialization
    lv_candidate_poi = RegionRandomPoint(RegionEntireMap());

    // Implementation
    gv_aI_number_of_threads_global_counter += 1;
    if ((gv_aI_number_of_threads_global_counter > gv_aI_max_number_of_threads)) {
        gv_aI_number_of_threads_global_counter -= 1;
        return true;
    }

    auto28ACA174_var = 1;
    for ( ; auto28ACA174_var <= auto28ACA174_ae; auto28ACA174_var += 1 ) {
        lv_bounty_target = PlayerGroupPlayer(gv_active_players, RandomInt(1, PlayerGroupCount(gv_active_players)));
        if ((PlayerGetPropertyInt(lp_p, c_playerPropMinerals) < (gv_carrier_bounty[lv_bounty_target] * gv_const_income_multiplier)) && (lp_p != lv_bounty_target) && (UnitIsAlive(gv_base_array[lv_bounty_target]) == true)) {
            gv_aI_attack_poi[lp_p][auto28ACA174_var] = UnitGetPosition(gv_base_array[lv_bounty_target]);
        }

        if (((UnitGroupCount(UnitGroupSearch(null, lp_p, gv_aI_attack_poi[lp_p][auto28ACA174_var], 4.9, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) || (lp_force_reset == true))) {
            lv_u = UnitGroupRandomUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("GhostAcademy", "", "", lp_p, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((lv_u != null)) {
                gv_aI_attack_poi[lp_p][auto28ACA174_var] = UnitGetPosition(lv_u);
            }

        }
        else {
            lv_u = UnitGroupRandomUnit(UnitGroupSearch(null, lp_p, gv_aI_attack_poi[lp_p][auto28ACA174_var], 4.9, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((lv_u != null)) {
                gv_aI_attack_poi[lp_p][auto28ACA174_var] = UnitGetPosition(lv_u);
            }

        }
        if ((gf_get_threat_level_of_area(lv_candidate_poi, 19.6, lp_p) < gf_get_threat_level_of_area(gv_aI_safe_poi[lp_p][auto28ACA174_var], 19.6, lp_p)) && (RegionContainsPoint(gv_blackhole_map, lv_candidate_poi) == false)) {
            gv_aI_safe_poi[lp_p][auto28ACA174_var] = lv_candidate_poi;
        }

    }
    gv_aI_number_of_threads_global_counter -= 1;
    return true;
}

trigger auto_gf_AI_build_units_Trigger = null;
int auto_gf_AI_build_units_lp_p;

void gf_AI_build_units (int lp_p) {
    auto_gf_AI_build_units_lp_p = lp_p;

    if (auto_gf_AI_build_units_Trigger == null) {
        auto_gf_AI_build_units_Trigger = TriggerCreate("auto_gf_AI_build_units_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_build_units_Trigger, false, false);
}

bool auto_gf_AI_build_units_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_AI_build_units_lp_p;

    // Automatic Variable Declarations
    int auto01563F29_val;

    // Implementation
    gv_aI_number_of_threads_global_counter += 1;
    if ((gv_aI_number_of_threads_global_counter > gv_aI_max_number_of_threads)) {
        gv_aI_number_of_threads_global_counter -= 1;
        return true;
    }

    if ((RegionContainsPoint(gv_blackhole_map, UnitGetPosition(gv_base_array[lp_p])) == false)) {
        gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTrain", 7)), RandomInt(1, 7), true);
        gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTrain", 6)), RandomInt(1, 7), true);
        gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTrain", 2)), RandomInt(1, 7), true);
        gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTrain", 1)), RandomInt(1, 7), true);
        auto01563F29_val = RandomInt(1, 4);
        if (auto01563F29_val == 1) {
            gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("HallucinationWarpPrism", 0)), 1, true);
        }
        else if (auto01563F29_val == 2) {
            gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("HallucinationOracle", 0)), 1, true);
        }
        else if (auto01563F29_val == 3) {
            gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("HallucinationProbe", 0)), 1, true);
        }
        else if (auto01563F29_val == 4) {
            gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("HallucinationPhoenix", 0)), 1, true);
        }
        else {
        }
    }
    else {
        gf_AI_attempt_singlemove(gv_base_array[lp_p], gv_aI_safe_poi[lp_p][RandomInt(1, gv_aI_max_pois)], true, true);
    }
    gv_aI_number_of_threads_global_counter -= 1;
    return true;
}

trigger auto_gf_AI_attempt_singlemove_Trigger = null;
unit auto_gf_AI_attempt_singlemove_lp_u;
point auto_gf_AI_attempt_singlemove_lp_destination;
bool auto_gf_AI_attempt_singlemove_lp_use_cloakdrive;
bool auto_gf_AI_attempt_singlemove_lp_ignore_blackhole;

void gf_AI_attempt_singlemove (unit lp_u, point lp_destination, bool lp_use_cloakdrive, bool lp_ignore_blackhole) {
    auto_gf_AI_attempt_singlemove_lp_u = lp_u;
    auto_gf_AI_attempt_singlemove_lp_destination = lp_destination;
    auto_gf_AI_attempt_singlemove_lp_use_cloakdrive = lp_use_cloakdrive;
    auto_gf_AI_attempt_singlemove_lp_ignore_blackhole = lp_ignore_blackhole;

    if (auto_gf_AI_attempt_singlemove_Trigger == null) {
        auto_gf_AI_attempt_singlemove_Trigger = TriggerCreate("auto_gf_AI_attempt_singlemove_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_attempt_singlemove_Trigger, false, false);
}

bool auto_gf_AI_attempt_singlemove_TriggerFunc (bool testConds, bool runActions) {
    unit lp_u = auto_gf_AI_attempt_singlemove_lp_u;
    point lp_destination = auto_gf_AI_attempt_singlemove_lp_destination;
    bool lp_use_cloakdrive = auto_gf_AI_attempt_singlemove_lp_use_cloakdrive;
    bool lp_ignore_blackhole = auto_gf_AI_attempt_singlemove_lp_ignore_blackhole;

    // Variable Declarations
    point lv_target;

    // Automatic Variable Declarations
    bool autoBA55B187_val;

    // Variable Initialization

    // Implementation
    gv_aI_number_of_threads_global_counter += 1;
    if ((gv_aI_number_of_threads_global_counter > gv_aI_max_number_of_threads)) {
        gv_aI_number_of_threads_global_counter -= 1;
        return true;
    }

    if ((UnitIsAlive(lp_u) == true)) {
        if ((UnitHasBehavior2(lp_u, "GhostCloak") == false) && (UnitHasBehavior2(lp_u, "Superspeed") == false)) {
            lv_target = gf_get_moveto_location_with_detour(UnitGetPosition(lp_u), UnitGetOwner(lp_u), lp_destination, lp_use_cloakdrive, lp_ignore_blackhole);
            if ((UnitIsAlive(lp_u) == true) && (lv_target != null)) {
                autoBA55B187_val = lp_use_cloakdrive;
                if (autoBA55B187_val == false) {
                    gf_AI_singleunit_order(lp_u, OrderTargetingPoint(AbilityCommand("move", 0), lv_target), 1, false);
                }
                else if (autoBA55B187_val == true) {
                    gf_AI_singleunit_order(lp_u, OrderTargetingPoint(AbilityCommand("move", 0), lv_target), 1, false);
                    gf_AI_singleunit_order(lp_u, OrderTargetingPoint(AbilityCommand("ForceField", 0), lv_target), 1, false);
                }
                else {
                }
            }

        }

    }

    gv_aI_number_of_threads_global_counter -= 1;
    return true;
}

trigger auto_gf_AI_attempt_switchweapon_Trigger = null;
unit auto_gf_AI_attempt_switchweapon_lp_u;

void gf_AI_attempt_switchweapon (unit lp_u) {
    auto_gf_AI_attempt_switchweapon_lp_u = lp_u;

    if (auto_gf_AI_attempt_switchweapon_Trigger == null) {
        auto_gf_AI_attempt_switchweapon_Trigger = TriggerCreate("auto_gf_AI_attempt_switchweapon_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_attempt_switchweapon_Trigger, false, false);
}

bool auto_gf_AI_attempt_switchweapon_TriggerFunc (bool testConds, bool runActions) {
    unit lp_u = auto_gf_AI_attempt_switchweapon_lp_u;

    // Automatic Variable Declarations
    int autoCA19D060_val;

    // Implementation
    gv_aI_number_of_threads_global_counter += 1;
    if ((gv_aI_number_of_threads_global_counter > gv_aI_max_number_of_threads)) {
        gv_aI_number_of_threads_global_counter -= 1;
        return true;
    }

    if (((UnitGetType(lp_u) == "Battlecruiser") || (UnitGetType(lp_u) == "Raven") || (UnitGetType(lp_u) == "Liberator") || (UnitGetType(lp_u) == "LiberatorAG") || (UnitGetType(lp_u) == "VoidSeeker"))) {
        autoCA19D060_val = RandomInt(0, 2);
        if (autoCA19D060_val == 0) {
            gf_AI_singleunit_order(lp_u, Order(AbilityCommand("SwitchToB", 0)), 1, false);
        }
        else if (autoCA19D060_val == 1) {
            gf_AI_singleunit_order(lp_u, Order(AbilityCommand("SwitchToA", 0)), 1, false);
        }
        else {
        }
    }
    else if ((UnitGetType(lp_u) == "DuskWing")) {
        if ((gf_get_threat_level_of_area(UnitGetPosition(lp_u), 19.6, UnitGetOwner(lp_u)) > 0)) {
            gf_AI_singleunit_order(lp_u, Order(AbilityCommand("VoodooShield", 0)), 4, false);
        }

    }
    gv_aI_number_of_threads_global_counter -= 1;
    return true;
}

trigger auto_gf_AI_request_rescue_Trigger = null;
unit auto_gf_AI_request_rescue_lp_u_target;

void gf_AI_request_rescue (unit lp_u_target) {
    auto_gf_AI_request_rescue_lp_u_target = lp_u_target;

    if (auto_gf_AI_request_rescue_Trigger == null) {
        auto_gf_AI_request_rescue_Trigger = TriggerCreate("auto_gf_AI_request_rescue_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_request_rescue_Trigger, false, false);
}

bool auto_gf_AI_request_rescue_TriggerFunc (bool testConds, bool runActions) {
    unit lp_u_target = auto_gf_AI_request_rescue_lp_u_target;

    // Variable Declarations
    unit lv_u;
    unitgroup lv_uG;

    // Automatic Variable Declarations
    unitgroup autoFC131C0D_g;
    int autoFC131C0D_u;
    unitgroup auto71557049_g;
    int auto71557049_u;
    unitgroup autoA9DF6E09_g;
    int autoA9DF6E09_u;

    // Variable Initialization
    lv_uG = UnitGroupEmpty();

    // Implementation
    gv_aI_number_of_threads_global_counter += 1;
    if ((gv_aI_number_of_threads_global_counter > gv_aI_max_number_of_threads)) {
        gv_aI_number_of_threads_global_counter -= 1;
        return true;
    }

    if ((UnitGetPropertyFixed(lp_u_target, c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
        gv_aI_number_of_threads_global_counter -= 1;
        return true;
    }

    lv_uG = UnitGroup("DuskWing", UnitGetOwner(lp_u_target), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 7);
    autoFC131C0D_g = lv_uG;
    autoFC131C0D_u = UnitGroupCount(autoFC131C0D_g, c_unitCountAll);
    for (;; autoFC131C0D_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoFC131C0D_g, autoFC131C0D_u);
        if (lv_u == null) { break; }
        gf_AI_singleunit_order(lv_u, Order(AbilityCommand("SwitchToB", 0)), 1, false);
    }
    auto71557049_g = lv_uG;
    auto71557049_u = UnitGroupCount(auto71557049_g, c_unitCountAll);
    for (;; auto71557049_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto71557049_g, auto71557049_u);
        if (lv_u == null) { break; }
        gf_AI_attempt_singlemove(lv_u, UnitGetPosition(lp_u_target), true, false);
    }
    autoA9DF6E09_g = lv_uG;
    autoA9DF6E09_u = UnitGroupCount(autoA9DF6E09_g, c_unitCountAll);
    for (;; autoA9DF6E09_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoA9DF6E09_g, autoA9DF6E09_u);
        if (lv_u == null) { break; }
        if ((UnitHasBehavior2(lv_u, "WeaponTypeB") == true)) {
            gf_AI_singleunit_order(lv_u, OrderTargetingUnit(AbilityCommand("AttackAllowsInvulnerable", 0), lp_u_target), 4, false);
        }

    }
    gv_aI_number_of_threads_global_counter -= 1;
    return true;
}

trigger auto_gf_AI_command_units_Trigger = null;
int auto_gf_AI_command_units_lp_p;

void gf_AI_command_units (int lp_p) {
    auto_gf_AI_command_units_lp_p = lp_p;

    if (auto_gf_AI_command_units_Trigger == null) {
        auto_gf_AI_command_units_Trigger = TriggerCreate("auto_gf_AI_command_units_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_command_units_Trigger, false, false);
}

bool auto_gf_AI_command_units_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_AI_command_units_lp_p;

    // Variable Declarations
    unit lv_u;
    point lv_destination_point;

    // Automatic Variable Declarations
    unitgroup autoFF8521DB_g;
    int autoFF8521DB_u;
    unitgroup auto416F9755_g;
    int auto416F9755_u;
    unitgroup auto0041C420_g;
    int auto0041C420_u;
    unitgroup auto7F55B936_g;
    int auto7F55B936_u;
    unitgroup auto19C03774_g;
    int auto19C03774_u;

    // Variable Initialization

    // Implementation
    gv_aI_number_of_threads_global_counter += 1;
    if ((gv_aI_number_of_threads_global_counter > gv_aI_max_number_of_threads)) {
        gv_aI_number_of_threads_global_counter -= 1;
        return true;
    }

    autoFF8521DB_g = UnitGroup("Oracle", lp_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFF8521DB_u = UnitGroupCount(autoFF8521DB_g, c_unitCountAll);
    for (;; autoFF8521DB_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoFF8521DB_g, autoFF8521DB_u);
        if (lv_u == null) { break; }
        gf_AI_attempt_singlemove(lv_u, gv_aI_attack_poi[lp_p][RandomInt(1, gv_aI_max_pois)], true, false);
        UnitIssueOrder(lv_u, Order(AbilityCommand("GuardianShield", 0)), c_orderQueueAddToEnd);
    }
    auto416F9755_g = UnitGroup("Disruptor", lp_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto416F9755_u = UnitGroupCount(auto416F9755_g, c_unitCountAll);
    for (;; auto416F9755_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto416F9755_g, auto416F9755_u);
        if (lv_u == null) { break; }
        gf_AI_attempt_singlemove(lv_u, gv_aI_attack_poi[lp_p][RandomInt(1, gv_aI_max_pois)], true, true);
        UnitIssueOrder(lv_u, Order(AbilityCommand("ArtanisPsionicShockwave", 0)), c_orderQueueAddToEnd);
    }
    auto0041C420_g = UnitGroup("ArbiterMP", lp_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0041C420_u = UnitGroupCount(auto0041C420_g, c_unitCountAll);
    for (;; auto0041C420_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto0041C420_g, auto0041C420_u);
        if (lv_u == null) { break; }
        gf_AI_attempt_singlemove(lv_u, RegionRandomPoint(RegionEntireMap()), false, false);
    }
    auto7F55B936_g = UnitGroup(null, lp_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 7);
    auto7F55B936_u = UnitGroupCount(auto7F55B936_g, c_unitCountAll);
    for (;; auto7F55B936_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto7F55B936_g, auto7F55B936_u);
        if (lv_u == null) { break; }
        gf_AI_attempt_switchweapon(lv_u);
    }
    auto19C03774_g = UnitGroup("VoidSeeker", lp_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto19C03774_u = UnitGroupCount(auto19C03774_g, c_unitCountAll);
    for (;; auto19C03774_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto19C03774_g, auto19C03774_u);
        if (lv_u == null) { break; }
        if ((UnitHasBehavior2(lv_u, "CloakspaceTurbineActive") == true)) {
            gf_AI_request_rescue(lv_u);
            lv_destination_point = gv_aI_attack_poi[lp_p][RandomInt(1, gv_aI_max_pois)];
            if ((gf_get_route_safety(UnitGetPosition(lv_u), lv_destination_point) == true)) {
                gf_AI_singleunit_order(lv_u, OrderTargetingPoint(AbilityCommand("CloakdriveTurbine", 0), lv_destination_point), 1, false);
            }

        }

    }
    gv_aI_number_of_threads_global_counter -= 1;
    return true;
}

trigger auto_gf_AI_attempt_upgrade_Trigger = null;
int auto_gf_AI_attempt_upgrade_lp_p;

void gf_AI_attempt_upgrade (int lp_p) {
    auto_gf_AI_attempt_upgrade_lp_p = lp_p;

    if (auto_gf_AI_attempt_upgrade_Trigger == null) {
        auto_gf_AI_attempt_upgrade_Trigger = TriggerCreate("auto_gf_AI_attempt_upgrade_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_attempt_upgrade_Trigger, false, false);
}

bool auto_gf_AI_attempt_upgrade_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_AI_attempt_upgrade_lp_p;

    // Automatic Variable Declarations
    int autoCA9A54AD_val;

    // Implementation
    gv_aI_number_of_threads_global_counter += 1;
    if ((gv_aI_number_of_threads_global_counter > gv_aI_max_number_of_threads)) {
        gv_aI_number_of_threads_global_counter -= 1;
        return true;
    }

    autoCA9A54AD_val = RandomInt(1, 8);
    if (autoCA9A54AD_val == 1) {
        gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTechLabResearch", 2)), 1, true);
    }
    else if (autoCA9A54AD_val == 2) {
        gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTechLabResearch", 3)), 1, true);
    }
    else if (autoCA9A54AD_val == 3) {
        gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTechLabResearch", 4)), 1, true);
    }
    else if (autoCA9A54AD_val == 4) {
        gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTechLabResearch", 1)), 1, true);
    }
    else if (autoCA9A54AD_val == 5) {
        gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTechLabResearch", 6)), 1, true);
    }
    else if (autoCA9A54AD_val == 6) {
        gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTechLabResearch", 7)), 1, true);
    }
    else if (autoCA9A54AD_val == 7) {
        gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTechLabResearch", 8)), 1, true);
    }
    else if (autoCA9A54AD_val == 8) {
        gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTechLabResearch", 9)), 1, true);
    }
    else {
    }
    gv_aI_number_of_threads_global_counter -= 1;
    return true;
}

trigger auto_gf_AI_attempt_guerilla_Trigger = null;
int auto_gf_AI_attempt_guerilla_lp_p;
point auto_gf_AI_attempt_guerilla_lp_target_location;
bool auto_gf_AI_attempt_guerilla_lp_is_recall_for_masstransfer;

void gf_AI_attempt_guerilla (int lp_p, point lp_target_location, bool lp_is_recall_for_masstransfer) {
    auto_gf_AI_attempt_guerilla_lp_p = lp_p;
    auto_gf_AI_attempt_guerilla_lp_target_location = lp_target_location;
    auto_gf_AI_attempt_guerilla_lp_is_recall_for_masstransfer = lp_is_recall_for_masstransfer;

    if (auto_gf_AI_attempt_guerilla_Trigger == null) {
        auto_gf_AI_attempt_guerilla_Trigger = TriggerCreate("auto_gf_AI_attempt_guerilla_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_attempt_guerilla_Trigger, false, false);
}

bool auto_gf_AI_attempt_guerilla_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_AI_attempt_guerilla_lp_p;
    point lp_target_location = auto_gf_AI_attempt_guerilla_lp_target_location;
    bool lp_is_recall_for_masstransfer = auto_gf_AI_attempt_guerilla_lp_is_recall_for_masstransfer;

    // Variable Declarations
    unit lv_u;
    int lv_offensepower;
    int lv_targetpower;

    // Automatic Variable Declarations
    unitgroup autoEE7DF057_g;
    int autoEE7DF057_u;

    // Variable Initialization

    // Implementation
    gv_aI_number_of_threads_global_counter += 1;
    if ((gv_aI_number_of_threads_global_counter > gv_aI_max_number_of_threads)) {
        gv_aI_number_of_threads_global_counter -= 1;
        return true;
    }

    lv_offensepower = gf_get_offense_level(gv_guerilla_ready_units[lp_p]);
    lv_targetpower = gf_get_threat_level_of_area(lp_target_location, 19.6, lp_p);
    if ((lv_offensepower > lv_targetpower) && ((lv_targetpower > 0) || (lp_is_recall_for_masstransfer == true))) {
        autoEE7DF057_g = UnitGroupFilter(null, lp_p, gv_guerilla_ready_units[lp_p], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoEE7DF057_u = UnitGroupCount(autoEE7DF057_g, c_unitCountAll);
        for (;; autoEE7DF057_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(autoEE7DF057_g, autoEE7DF057_u);
            if (lv_u == null) { break; }
            gf_AI_attempt_singlemove(lv_u, lp_target_location, true, false);
        }
    }

    gv_aI_number_of_threads_global_counter -= 1;
    return true;
}

trigger auto_gf_AI_attempt_massattack_Trigger = null;
int auto_gf_AI_attempt_massattack_lp_p;

void gf_AI_attempt_massattack (int lp_p) {
    auto_gf_AI_attempt_massattack_lp_p = lp_p;

    if (auto_gf_AI_attempt_massattack_Trigger == null) {
        auto_gf_AI_attempt_massattack_Trigger = TriggerCreate("auto_gf_AI_attempt_massattack_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_attempt_massattack_Trigger, false, false);
}

bool auto_gf_AI_attempt_massattack_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_AI_attempt_massattack_lp_p;

    // Variable Declarations
    point lv_targetlocation;
    point lv_target;
    int lv_src_power;
    int lv_dst_power;
    bool lv_is_route_safe;
    int lv_poi_idx;

    // Automatic Variable Declarations
    unitgroup auto2A188B1C_g;
    int auto2A188B1C_u;
    unit auto2A188B1C_var;

    // Variable Initialization
    lv_poi_idx = RandomInt(1, gv_aI_max_pois);

    // Implementation
    gv_aI_number_of_threads_global_counter += 1;
    if ((gv_aI_number_of_threads_global_counter > gv_aI_max_number_of_threads)) {
        gv_aI_number_of_threads_global_counter -= 1;
        return true;
    }

    if ((UnitIsAlive(gv_base_array[lp_p]) == false)) {
        gv_aI_number_of_threads_global_counter -= 1;
        return true;
    }

    if ((UnitAbilityGetCooldown(gv_base_array[lp_p], "MassCloakdrive", "Abil/CloakDriveMass") == 0.0)) {
        lv_src_power = gf_get_offense_level_of_massattack(UnitGetPosition(gv_base_array[lp_p]), 19.6, lp_p);
        lv_dst_power = gf_get_threat_level_of_area(gv_aI_attack_poi[lp_p][lv_poi_idx], 19.6, lp_p);
        if ((lv_src_power > lv_dst_power) && (lv_dst_power != 0)) {
            lv_target = gf_get_moveto_location_with_detour(UnitGetPosition(gv_base_array[lp_p]), lp_p, gv_aI_attack_poi[lp_p][lv_poi_idx], true, false);
            if ((lv_target != null)) {
                auto2A188B1C_g = UnitGroup("WarpPrism", lp_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
                auto2A188B1C_u = UnitGroupCount(auto2A188B1C_g, c_unitCountAll);
                for (;; auto2A188B1C_u -= 1) {
                    auto2A188B1C_var = UnitGroupUnitFromEnd(auto2A188B1C_g, auto2A188B1C_u);
                    if (auto2A188B1C_var == null) { break; }
                    gf_AI_attempt_singlemove(auto2A188B1C_var, gv_aI_attack_poi[lp_p][lv_poi_idx], true, true);
                    Wait(5.0, c_timeGame);
                    gf_AI_singleunit_order(auto2A188B1C_var, Order(AbilityCommand("PhasingMode", 0)), 1, false);
                    Wait(2.0, c_timeGame);
                }
                gf_AI_singleunit_order(gv_base_array[lp_p], OrderTargetingPoint(AbilityCommand("MassCloakdrive", 0), lv_target), 1, false);
            }

        }
        else {
            gf_AI_attempt_recall_rally(lp_p);
            gf_AI_attempt_guerilla(lp_p, UnitGetPosition(gv_base_array[lp_p]), true);
            gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTrain", 7)), 1, true);
            gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTrain", 6)), 1, true);
            gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTrain", 2)), 1, true);
            gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("StarportTrain", 1)), 1, true);
            gv_aI_attack_poi[lp_p][lv_poi_idx] = gf_get_location_with_variance(gv_aI_attack_poi[lp_p][lv_poi_idx], 9.8);
            lv_poi_idx = RandomInt(1, gv_aI_max_pois);
        }
    }

    gv_aI_number_of_threads_global_counter -= 1;
    return true;
}

trigger auto_gf_AI_attempt_attack_rally_Trigger = null;
int auto_gf_AI_attempt_attack_rally_lp_p;
int auto_gf_AI_attempt_attack_rally_lp_poi;

void gf_AI_attempt_attack_rally (int lp_p, int lp_poi) {
    auto_gf_AI_attempt_attack_rally_lp_p = lp_p;
    auto_gf_AI_attempt_attack_rally_lp_poi = lp_poi;

    if (auto_gf_AI_attempt_attack_rally_Trigger == null) {
        auto_gf_AI_attempt_attack_rally_Trigger = TriggerCreate("auto_gf_AI_attempt_attack_rally_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_attempt_attack_rally_Trigger, false, false);
}

bool auto_gf_AI_attempt_attack_rally_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_AI_attempt_attack_rally_lp_p;
    int lp_poi = auto_gf_AI_attempt_attack_rally_lp_poi;

    // Automatic Variable Declarations
    // Implementation
    gv_aI_number_of_threads_global_counter += 1;
    if ((gv_aI_number_of_threads_global_counter > gv_aI_max_number_of_threads)) {
        gv_aI_number_of_threads_global_counter -= 1;
        return true;
    }

    if ((gf_get_route_safety(UnitGetPosition(gv_base_array[lp_p]), gv_aI_attack_poi[lp_p][lp_poi]) == true)) {
        gf_AI_singleunit_order(gv_base_array[lp_p], OrderTargetingPoint(AbilityCommand("Waypoint", 0), gv_aI_attack_poi[lp_p][lp_poi]), 1, false);
    }
    else {
        gf_AI_singleunit_order(gv_base_array[lp_p], Order(AbilityCommand("CancelWaypoint", 0)), 1, false);
        gf_AI_attempt_singlemove(gv_base_array[lp_p], gv_aI_safe_poi[lp_p][RandomInt(1, gv_aI_max_pois)], true, true);
    }
    gv_aI_number_of_threads_global_counter -= 1;
    return true;
}

trigger auto_gf_AI_attempt_recall_rally_Trigger = null;
int auto_gf_AI_attempt_recall_rally_lp_p;

void gf_AI_attempt_recall_rally (int lp_p) {
    auto_gf_AI_attempt_recall_rally_lp_p = lp_p;

    if (auto_gf_AI_attempt_recall_rally_Trigger == null) {
        auto_gf_AI_attempt_recall_rally_Trigger = TriggerCreate("auto_gf_AI_attempt_recall_rally_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_attempt_recall_rally_Trigger, false, false);
}

bool auto_gf_AI_attempt_recall_rally_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_AI_attempt_recall_rally_lp_p;

    // Automatic Variable Declarations
    // Implementation
    gf_AI_singleunit_order(gv_base_array[lp_p], OrderTargetingPoint(AbilityCommand("Waypoint", 0), UnitGetPosition(gv_base_array[lp_p])), 1, false);
    return true;
}

trigger auto_gf_AI_singleunit_order_Trigger = null;
unit auto_gf_AI_singleunit_order_lp_u;
order auto_gf_AI_singleunit_order_lp_order;
int auto_gf_AI_singleunit_order_lp_repeat;
bool auto_gf_AI_singleunit_order_lp_queue;

void gf_AI_singleunit_order (unit lp_u, order lp_order, int lp_repeat, bool lp_queue) {
    auto_gf_AI_singleunit_order_lp_u = lp_u;
    auto_gf_AI_singleunit_order_lp_order = lp_order;
    auto_gf_AI_singleunit_order_lp_repeat = lp_repeat;
    auto_gf_AI_singleunit_order_lp_queue = lp_queue;

    if (auto_gf_AI_singleunit_order_Trigger == null) {
        auto_gf_AI_singleunit_order_Trigger = TriggerCreate("auto_gf_AI_singleunit_order_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_singleunit_order_Trigger, false, false);
}

bool auto_gf_AI_singleunit_order_TriggerFunc (bool testConds, bool runActions) {
    unit lp_u = auto_gf_AI_singleunit_order_lp_u;
    order lp_order = auto_gf_AI_singleunit_order_lp_order;
    int lp_repeat = auto_gf_AI_singleunit_order_lp_repeat;
    bool lp_queue = auto_gf_AI_singleunit_order_lp_queue;

    // Automatic Variable Declarations
    int auto5649B786_n;
    int auto5649B786_i;
    bool autoDEB6C705_val;

    // Implementation
    gv_aI_number_of_threads_global_counter += 1;
    if ((gv_aI_number_of_threads_global_counter > gv_aI_max_number_of_threads)) {
        gv_aI_number_of_threads_global_counter -= 1;
        return true;
    }

    auto5649B786_n = lp_repeat;
    for (auto5649B786_i = 1; auto5649B786_i <= auto5649B786_n; auto5649B786_i += 1) {
        if ((UnitIsAlive(lp_u) == true)) {
            if (((UnitHasBehavior2(lp_u, "GhostCloak") == false) || (UnitHasBehavior2(lp_u, "Superspeed") == false))) {
                autoDEB6C705_val = lp_queue;
                if (autoDEB6C705_val == false) {
                    UnitIssueOrder(lp_u, lp_order, c_orderQueueReplace);
                }
                else if (autoDEB6C705_val == true) {
                    UnitIssueOrder(lp_u, lp_order, c_orderQueueAddToEnd);
                }
                else {
                }
                if ((lp_repeat > 1)) {
                    Wait(0.25, c_timeGame);
                }

            }

        }

    }
    gv_aI_number_of_threads_global_counter -= 1;
    return true;
}

trigger auto_gf_AI_evade_proactive_Trigger = null;
int auto_gf_AI_evade_proactive_lp_p;

void gf_AI_evade_proactive (int lp_p) {
    auto_gf_AI_evade_proactive_lp_p = lp_p;

    if (auto_gf_AI_evade_proactive_Trigger == null) {
        auto_gf_AI_evade_proactive_Trigger = TriggerCreate("auto_gf_AI_evade_proactive_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_evade_proactive_Trigger, false, false);
}

bool auto_gf_AI_evade_proactive_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_AI_evade_proactive_lp_p;

    // Variable Declarations
    int lv_threat_local_area;
    int lv_offense_local_area;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_aI_number_of_threads_global_counter += 1;
    if ((gv_aI_number_of_threads_global_counter > gv_aI_max_number_of_threads)) {
        gv_aI_number_of_threads_global_counter -= 1;
        return true;
    }

    lv_threat_local_area = gf_get_threat_level_of_area(UnitGetPosition(gv_base_array[lp_p]), 19.6, lp_p);
    lv_offense_local_area = gf_get_offense_level_of_massattack(UnitGetPosition(gv_base_array[lp_p]), 19.6, lp_p);
    if ((lv_threat_local_area > lv_offense_local_area)) {
        gf_AI_attempt_singlemove(gv_base_array[lp_p], gv_aI_safe_poi[lp_p][1], true, true);
        gf_AI_request_rescue(gv_base_array[lp_p]);
    }
    else {
        gf_AI_request_rescue(gv_base_array[lp_p]);
    }
    gv_aI_number_of_threads_global_counter -= 1;
    return true;
}

trigger auto_gf_respawn_carrier_Trigger = null;
int auto_gf_respawn_carrier_lp_p;
point auto_gf_respawn_carrier_lp_pL;
bool auto_gf_respawn_carrier_lp_no_delay;

void gf_respawn_carrier (int lp_p, point lp_pL, bool lp_no_delay) {
    auto_gf_respawn_carrier_lp_p = lp_p;
    auto_gf_respawn_carrier_lp_pL = lp_pL;
    auto_gf_respawn_carrier_lp_no_delay = lp_no_delay;

    if (auto_gf_respawn_carrier_Trigger == null) {
        auto_gf_respawn_carrier_Trigger = TriggerCreate("auto_gf_respawn_carrier_TriggerFunc");
    }

    TriggerExecute(auto_gf_respawn_carrier_Trigger, false, false);
}

bool auto_gf_respawn_carrier_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_respawn_carrier_lp_p;
    point lp_pL = auto_gf_respawn_carrier_lp_pL;
    bool lp_no_delay = auto_gf_respawn_carrier_lp_no_delay;

    // Variable Declarations
    unit lv_u;
    timer lv_t;
    actor lv_fX;
    point lv_l;

    // Automatic Variable Declarations
    bool auto7D208347_val;

    // Variable Initialization
    lv_t = TimerCreate();

    // Implementation
    auto7D208347_val = lp_no_delay;
    if (auto7D208347_val == false) {
        libNtve_gf_CreateActorAtPoint("EnergyNovaShockwave2", lp_pL);
        libNtve_gf_CreateActorAtPoint("AssemblyDestroyedSoundActorMini", lp_pL);
        Wait(2.8, c_timeGame);
        libNtve_gf_CreateActorAtPoint("EnergyNovaShockwave", lp_pL);
        libNtve_gf_CreateActorAtPoint("CarrierDestroyedSoundActor", lp_pL);
    }
    else if (auto7D208347_val == true) {
        libNtve_gf_CreateActorAtPoint("EnergyNovaShockwave", lp_pL);
        libNtve_gf_CreateActorAtPoint("CarrierDestroyedSoundActor", lp_pL);
    }
    else {
    }
    lv_l = RegionRandomPoint(RegionEntireMap());
    VisRevealArea(lp_p, RegionEntireMap(), 10.0, false);
    CameraShakeStart(lp_p, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.1, 4.0, 100.0, 1.0);
    Wait(1.0, c_timeReal);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GhostAcademy", 0, 0, RegionRandomPoint(RegionEntireMap()));
    lv_u = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(lv_u, "SetOpacity 0.001000");
    libNtve_gf_MakeUnitInvulnerable(lv_u, true);
    UnitBehaviorAdd(lv_u, "NoNukes", lv_u, 1);
    UnitBehaviorAdd(lv_u, "SpawnProtection", lv_u, 1);
    UnitBehaviorAdd(lv_u, "Superspeed", lv_u, 1);
    SoundPlay(SoundLink("UI_ScoreScreenMissionCreditsLoop", 0), PlayerGroupSingle(lp_p), 100.0, 0.0);
    gf_show_respawn_countdown(lp_p);
    SoundStop(SoundLastPlayed(), true);
    SoundPlay(SoundLink("UI_MercenaryBriefcase_HireMerc", 0), PlayerGroupSingle(lp_p), 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(lv_u, "SetOpacity 1.000000 3.000000");
    UnitSetPosition(lv_u, libNtve_gf_PointOffsetTowardsPoint(lv_l, 49.0, PointFromId(36)), false);
    UnitIssueOrder(lv_u, OrderTargetingPoint(AbilityCommand("ForceField", 0), libNtve_gf_PointOffsetTowardsPoint(lv_l, -7.0, PointFromId(36))), c_orderQueueReplace);
    UnitBehaviorRemove(lv_u, "Superspeed", 1);
    gv_timer_break_flag[lp_p] = true;
    UIDisplayMessage(PlayerGroupSingle(lp_p), c_messageAreaDirective, StringExternal("Param/Value/624BDD45"));
    PingCreate(PlayerGroupSingle(lp_p), "PingBaseAttack", lv_l, Color(0.00, 100.00, 0.00), 14.0);
    Wait(2.0, c_timeReal);
    UnitBehaviorRemove(lv_u, "NoNukes", 1);
    UnitSetPropertyFixed(lv_u, c_unitPropEnergyPercent, 100.0);
    libNtve_gf_UnitAbilityRemoveCooldown(lv_u, "MassCloakdrive", "Abil/CloakDriveMass");
    UnitSetOwner(lv_u, lp_p, true);
    libNtve_gf_MakeUnitInvulnerable(lv_u, false);
    gv_base_array[lp_p] = lv_u;
    gv_base_is_active[lp_p] = true;
    CameraShakeStart(lp_p, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.1, 4.0, 100.0, 0.25);
    UnitSelect(lv_u, lp_p, true);
    UnitControlGroupAddUnit(lp_p, 1, lv_u);
    libNtve_gf_SendActorMessageToUnit(lv_u, "HaloStart");
    UIDisplayMessage(PlayerGroupSingle(lp_p), c_messageAreaChat, StringExternal("Param/Value/02E975EB"));
    Wait(7.0, c_timeGame);
    gv_timer_break_flag[lp_p] = false;
    Wait(7.0, c_timeGame);
    UnitBehaviorRemove(lv_u, "SpawnProtection", 1);
    libNtve_gf_SendActorMessageToUnit(lv_u, "HaloStop");
    return true;
}

void gf_show_respawn_countdown (int lp_p) {
    // Variable Declarations
    timer lv_t;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_t = TimerCreate();

    // Implementation
    TimerStart(lv_t, 7.0, false, c_timeReal);
    while ((TimerGetRemaining(lv_t) > 0.0)) {
        UIDisplayMessage(PlayerGroupSingle(lp_p), c_messageAreaDirective, (StringExternal("Param/Value/3EE08298") + FixedToText(TimerGetRemaining(lv_t), 2)));
        Wait(0.05, c_timeGame);
    }
}

trigger auto_gf_player_score_update_Trigger = null;
int auto_gf_player_score_update_lp_a;
int auto_gf_player_score_update_lp_p;
int auto_gf_player_score_update_lp_bounty_amount;

void gf_player_score_update (int lp_a, int lp_p, int lp_bounty_amount) {
    auto_gf_player_score_update_lp_a = lp_a;
    auto_gf_player_score_update_lp_p = lp_p;
    auto_gf_player_score_update_lp_bounty_amount = lp_bounty_amount;

    if (auto_gf_player_score_update_Trigger == null) {
        auto_gf_player_score_update_Trigger = TriggerCreate("auto_gf_player_score_update_TriggerFunc");
    }

    TriggerExecute(auto_gf_player_score_update_Trigger, false, false);
}

bool auto_gf_player_score_update_TriggerFunc (bool testConds, bool runActions) {
    int lp_a = auto_gf_player_score_update_lp_a;
    int lp_p = auto_gf_player_score_update_lp_p;
    int lp_bounty_amount = auto_gf_player_score_update_lp_bounty_amount;

    // Variable Declarations
    int lv_tmp;
    int lv_i;

    // Automatic Variable Declarations
    bool auto8205CF2E_val;

    // Variable Initialization

    // Implementation
    if ((lp_a == lp_p)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/28FF3D36") + gv_player_tags[lp_p] + StringExternal("Param/Value/808E15C0")));
        gv_player_stats_kill[lp_a] -= 1;
        gv_player_stats_death[lp_p] += 1;
    }
    else {
        if ((lp_bounty_amount >= 0)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/75E5CC70") + gv_player_tags[lp_a] + StringExternal("Param/Value/12BB9CD8") + gv_player_tags[lp_p] + StringExternal("Param/Value/CD111D85") + IntToText(lp_bounty_amount) + StringExternal("Param/Value/E051B660")));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/F84F25CF") + gv_player_tags[lp_a] + StringExternal("Param/Value/D5224D06") + gv_player_tags[lp_p] + StringExternal("Param/Value/3AC5FBD3") + IntToText(lp_bounty_amount) + StringExternal("Param/Value/8F9E1150")));
        }
        gv_player_stats_kill[lp_a] += 1;
        gv_player_stats_death[lp_p] += 1;
    }
    BoardItemSetText(gv_board, 2, gv_player_board_idx[lp_p], gf_player_kda_text(lp_p));
    auto8205CF2E_val = gv_exit_flag[lp_p];
    if (auto8205CF2E_val == false) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/B0AE83A2") + PlayerName(lp_p) + StringExternal("Param/Value/D01ABB37")));
    }
    else if (auto8205CF2E_val == true) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/C50B8F85") + PlayerName(lp_p) + StringExternal("Param/Value/87A1354E")));
    }
    else {
    }
    Wait(5.0, c_timeGame);
    gf_showtip(PlayerGroupSingle(lp_p), RandomInt(1, 28));
    return true;
}

text gf_player_kda_text (int lp_player) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_carrier_bounty[lp_player] >= 0)) {
        lv_text = (StringExternal("Param/Value/77456540") + IntToText(gv_player_stats_kill[lp_player]) + StringExternal("Param/Value/2EBFED0F") + IntToText((gv_carrier_bounty[lp_player] * gv_const_income_multiplier)) + StringExternal("Param/Value/DD3C83D8"));
    }
    else {
        lv_text = (StringExternal("Param/Value/4A8708DD") + IntToText(gv_player_stats_kill[lp_player]) + StringExternal("Param/Value/E6A95545") + IntToText((gv_carrier_bounty[lp_player] * gv_const_income_multiplier)) + StringExternal("Param/Value/951B6973"));
    }
    return lv_text;
}

trigger auto_gf_showtip_Trigger = null;
playergroup auto_gf_showtip_lp_playergroup;
int auto_gf_showtip_lp_tip_id;

void gf_showtip (playergroup lp_playergroup, int lp_tip_id) {
    auto_gf_showtip_lp_playergroup = lp_playergroup;
    auto_gf_showtip_lp_tip_id = lp_tip_id;

    if (auto_gf_showtip_Trigger == null) {
        auto_gf_showtip_Trigger = TriggerCreate("auto_gf_showtip_TriggerFunc");
    }

    TriggerExecute(auto_gf_showtip_Trigger, false, false);
}

bool auto_gf_showtip_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_playergroup = auto_gf_showtip_lp_playergroup;
    int lp_tip_id = auto_gf_showtip_lp_tip_id;

    // Automatic Variable Declarations
    int auto69358DB2_val;

    // Implementation
    auto69358DB2_val = lp_tip_id;
    if (auto69358DB2_val == 1) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/12F43E79"));
    }
    else if (auto69358DB2_val == 2) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/57202303"));
    }
    else if (auto69358DB2_val == 3) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/C382D550"));
    }
    else if (auto69358DB2_val == 4) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/8DFE8744"));
    }
    else if (auto69358DB2_val == 5) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/E2450E31"));
    }
    else if (auto69358DB2_val == 6) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/2CEC4294"));
    }
    else if (auto69358DB2_val == 7) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/D4DC3715"));
    }
    else if (auto69358DB2_val == 8) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/BA453ED2"));
    }
    else if (auto69358DB2_val == 9) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/0769D90E"));
    }
    else if (auto69358DB2_val == 10) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/6F886C6E"));
    }
    else if (auto69358DB2_val == 11) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/E30CB1F3"));
    }
    else if (auto69358DB2_val == 12) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/5FAB497A"));
    }
    else if (auto69358DB2_val == 13) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/4B975FAE"));
    }
    else if (auto69358DB2_val == 14) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/5A642DEB"));
    }
    else if (auto69358DB2_val == 15) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/F4BEDB16"));
    }
    else if (auto69358DB2_val == 16) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/06B19764"));
    }
    else if (auto69358DB2_val == 17) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/55AADF65"));
    }
    else if (auto69358DB2_val == 18) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/D7D1E298"));
    }
    else if (auto69358DB2_val == 19) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/C057C1D7"));
    }
    else if (auto69358DB2_val == 20) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/2E1FFC4C"));
    }
    else if (auto69358DB2_val == 21) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/098A1EFD"));
    }
    else if (auto69358DB2_val == 22) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/BC350FE3"));
    }
    else if (auto69358DB2_val == 23) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/00E29370"));
    }
    else if (auto69358DB2_val == 24) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/AF520109"));
    }
    else if (auto69358DB2_val == 25) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/C25A1081"));
    }
    else if (auto69358DB2_val == 26) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/B895A408"));
    }
    else if (auto69358DB2_val == 27) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/04105D6E"));
    }
    else if (auto69358DB2_val == 28) {
        UIDisplayMessage(lp_playergroup, c_messageAreaSubtitle, StringExternal("Param/Value/A998F020"));
    }
    else {
    }
    SoundPlay(SoundLink("UI_Bnet_PopUp_Generic", 1), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

trigger auto_gf_purge_killunit_Trigger = null;
unit auto_gf_purge_killunit_lp_u;

void gf_purge_killunit (unit lp_u) {
    auto_gf_purge_killunit_lp_u = lp_u;

    if (auto_gf_purge_killunit_Trigger == null) {
        auto_gf_purge_killunit_Trigger = TriggerCreate("auto_gf_purge_killunit_TriggerFunc");
    }

    TriggerExecute(auto_gf_purge_killunit_Trigger, false, false);
}

bool auto_gf_purge_killunit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_u = auto_gf_purge_killunit_lp_u;

    // Automatic Variable Declarations
    // Implementation
    Wait(RandomFixed(0.0, 1.0), c_timeGame);
    UnitKill(lp_u);
    return true;
}

void gf_discinit () {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_StarcodeSetEncryptionAlphabet("0123456789ABCDEF");
    gv_disc.lv_dummy_array[1] = "A";
    gv_disc.lv_dummy_array[2] = "B";
    gv_disc.lv_dummy_array[3] = "C";
    gv_disc.lv_dummy_array[4] = "D";
    gv_disc.lv_dummy_array[5] = "E";
    gv_disc.lv_dummy_array[6] = "F";
}

void gf_validate (int lp_i) {
    // Variable Declarations
    string lv_tmp;

    // Automatic Variable Declarations
    const int auto2CF68F3D_ae = 6;
    int auto2CF68F3D_var;

    // Variable Initialization
    lv_tmp = "";

    // Implementation
    lv_tmp = PlayerHandle(lp_i);
    lv_tmp = StringReplaceWord(lv_tmp, "-", " ", c_stringReplaceAll, c_stringCase);
    lv_tmp = StringWord(lv_tmp, 4);
    if ((GameIsTestMap(false) == true)) {
        lv_tmp = "1";
    }

    gv_disc.lv_playerhandle[lp_i] = StringToInt(lv_tmp);
    BankLoad("DISC", lp_i);
    gv_disc_array[lp_i] = BankLastCreated();
    if ((BankKeyExists(gv_disc_array[lp_i], "DATA", "B") == true)) {
        lv_tmp = BankValueGetAsString(gv_disc_array[lp_i], "DATA", "B");
        if (lib1_gf_StarcodeValidateString(lv_tmp, 7)) {
            lv_tmp = lib1_gf_StarcodeDecryptString(lib1_gf_StarcodeRemoveHashfromString(lv_tmp, 7), IntToString(gv_disc.lv_playerhandle[lp_i]));
            auto2CF68F3D_var = 1;
            for ( ; auto2CF68F3D_var <= auto2CF68F3D_ae; auto2CF68F3D_var += 1 ) {
                lv_tmp = StringReplaceWord(lv_tmp, gv_disc.lv_dummy_array[auto2CF68F3D_var], " ", c_stringReplaceAll, c_stringCase);
            }
            gv_disc.lv_playcount[lp_i] = StringToInt(StringWord(lv_tmp, 1));
            gv_disc.lv_wincount[lp_i] = StringToInt(StringWord(lv_tmp, 2));
            gv_disc.lv_killcount[lp_i] = StringToInt(StringWord(lv_tmp, 3));
            gv_disc.lv_deathcount[lp_i] = StringToInt(StringWord(lv_tmp, 4));
        }

    }
    else {
        gf_burn(lp_i);
    }
}

void gf_burn (int lp_i) {
    // Variable Declarations
    string lv_cache;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cache = "";

    // Implementation
    lv_cache = (lv_cache + IntToString(gv_disc.lv_playcount[lp_i]) + gv_disc.lv_dummy_array[RandomInt(1, 6)]);
    lv_cache = (lv_cache + IntToString(gv_disc.lv_wincount[lp_i]) + gv_disc.lv_dummy_array[RandomInt(1, 6)]);
    lv_cache = (lv_cache + IntToString(gv_disc.lv_killcount[lp_i]) + gv_disc.lv_dummy_array[RandomInt(1, 6)]);
    lv_cache = (lv_cache + IntToString(gv_disc.lv_deathcount[lp_i]) + gv_disc.lv_dummy_array[RandomInt(1, 6)]);
    while ((StringLength(lv_cache) < 25)) {
        lv_cache = (lv_cache + gv_disc.lv_dummy_array[RandomInt(1, 6)]);
    }
    lv_cache = lib1_gf_StarcodeEncryptString(lv_cache, IntToString(gv_disc.lv_playerhandle[lp_i]));
    lv_cache = lib1_gf_StarcodeHashString(lv_cache, 7);
    BankValueSetFromString(gv_disc_array[lp_i], "DATA", "B", lv_cache);
    BankSave(gv_disc_array[lp_i]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: init
//--------------------------------------------------------------------------------------------------
bool gt_init_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_angle;
    int lv_i;
    unit lv_u1;
    unit lv_u2;

    // Automatic Variable Declarations
    int autoD4BA8C85_val;
    unitgroup auto185AF373_g;
    int auto185AF373_u;
    unit auto185AF373_var;
    unitgroup auto7F758FBC_g;
    int auto7F758FBC_u;
    unit auto7F758FBC_var;
    const int autoB639D54D_ae = gv_const_maxdisc;
    const int autoB639D54D_ai = 1;
    const int autoD85CA0B9_ae = gv_const_maxdisc;
    int autoD85CA0B9_var;
    const int auto2ADE3C79_ae = gv_const_maxdisc;
    int auto2ADE3C79_var;
    const int auto5AB2D5BA_ae = gv_const_maxdisc;
    int auto5AB2D5BA_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(UnitFromId(5), gf_spacecolor(gv_spacecolor));
    libNtve_gf_SendActorMessageToUnit(UnitFromId(5), "SetOpacity 0.300000");
    GameSetSpeedValue(c_gameSpeedSlow);
    GameSetSpeedLocked(true);
    gf_discinit();
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, false);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0CCDBA45"));
    SoundPlay(SoundLink("UI_ScoreScreenMissionName", 0), PlayerGroupAll(), 100.0, 0.0);
    autoD4BA8C85_val = gv_purge_type;
    if (autoD4BA8C85_val == 1) {
        UnitRemove(UnitFromId(86));
        UnitRemove(UnitFromId(11));
    }
    else if (autoD4BA8C85_val == 2) {
        auto185AF373_g = UnitGroup("RipFieldGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto185AF373_u = UnitGroupCount(auto185AF373_g, c_unitCountAll);
        for (;; auto185AF373_u -= 1) {
            auto185AF373_var = UnitGroupUnitFromEnd(auto185AF373_g, auto185AF373_u);
            if (auto185AF373_var == null) { break; }
            UnitRemove(auto185AF373_var);
        }
        UnitRemove(UnitFromId(37));
        UnitSetFacing(UnitFromId(86), libNtve_gf_RandomAngle(), 0.0);
    }
    else if (autoD4BA8C85_val == 3) {
        auto7F758FBC_g = UnitGroup("RipFieldGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7F758FBC_u = UnitGroupCount(auto7F758FBC_g, c_unitCountAll);
        for (;; auto7F758FBC_u -= 1) {
            auto7F758FBC_var = UnitGroupUnitFromEnd(auto7F758FBC_g, auto7F758FBC_u);
            if (auto7F758FBC_var == null) { break; }
            UnitRemove(auto7F758FBC_var);
        }
        UnitRemove(UnitFromId(37));
        UnitRemove(UnitFromId(86));
    }
    else {
    }
    lv_i = 1;
    for ( ; ( (autoB639D54D_ai >= 0 && lv_i <= autoB639D54D_ae) || (autoB639D54D_ai < 0 && lv_i >= autoB639D54D_ae) ) ; lv_i += autoB639D54D_ai ) {
        if ((PlayerType(lv_i) == c_playerTypeUser)) {
            gf_validate(lv_i);
            if ((RandomInt(0, 1) == 1)) {
                gv_host = lv_i;
            }

        }

    }
    autoD85CA0B9_var = 1;
    for ( ; autoD85CA0B9_var <= autoD85CA0B9_ae; autoD85CA0B9_var += 1 ) {
        PlayerPauseAllCooldowns(autoD85CA0B9_var, true);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GhostAcademy", 0, autoD85CA0B9_var, PointFromId(36));
        libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    }
    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupAll(), libNtve_ge_AllianceSetting_Enemy);
    auto2ADE3C79_var = 1;
    for ( ; auto2ADE3C79_var <= auto2ADE3C79_ae; auto2ADE3C79_var += 1 ) {
        CameraLockInput(auto2ADE3C79_var, true);
        CameraApplyInfo(auto2ADE3C79_var, CameraInfoFromId(7), 0.0, -1, 10.0, false);
        lv_i = RandomInt(1, gv_const_maxdisc);
        lv_u1 = UnitGroupClosestToPoint(UnitGroup("GhostAcademy", auto2ADE3C79_var, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 1), RegionGetCenter(RegionFromId(1)));
        lv_u2 = UnitGroupClosestToPoint(UnitGroup("GhostAcademy", lv_i, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 1), RegionGetCenter(RegionFromId(1)));
        UnitSetOwner(lv_u1, lv_i, true);
        UnitSetOwner(lv_u2, auto2ADE3C79_var, true);
        UnitSetPropertyFixed(lv_u1, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(lv_u2, c_unitPropLifePercent, 100.0);
        if ((PlayerType(auto2ADE3C79_var) == c_playerTypeComputer)) {
            gv_ai_active = true;
            gv_aI_controller[auto2ADE3C79_var] = true;
        }

    }
    auto5AB2D5BA_var = 1;
    for ( ; auto5AB2D5BA_var <= auto5AB2D5BA_ae; auto5AB2D5BA_var += 1 ) {
        PlayerOptionOverride(auto5AB2D5BA_var, "simplecommandcard", "0");
        PlayerOptionOverride(auto5AB2D5BA_var, "selectuncontrolable", "1");
        PlayerOptionOverride(auto5AB2D5BA_var, "displayflyerhelper", "None");
        PlayerOptionOverride(auto5AB2D5BA_var, "selectuncontrolable", "0");
        PlayerModifyPropertyInt(auto5AB2D5BA_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, 77);
        gv_base_array[auto5AB2D5BA_var] = UnitGroupClosestToPoint(UnitGroup("GhostAcademy", auto5AB2D5BA_var, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 1), PointFromId(36));
        libNtve_gf_ShowHideUnit(gv_base_array[auto5AB2D5BA_var], false);
        UnitSetPosition(gv_base_array[auto5AB2D5BA_var], PointWithOffsetPolar(PointFromId(36), RandomInt(32, 96), RandomInt(((52 * auto5AB2D5BA_var) - 52), (52 * auto5AB2D5BA_var))), false);
        libNtve_gf_PauseUnit(gv_base_array[auto5AB2D5BA_var], true);
        CameraPan(auto5AB2D5BA_var, UnitGetPosition(gv_base_array[auto5AB2D5BA_var]), 0.0, -1, 0.0, false);
    }
    EnvironmentShow(c_environmentDoodads, false);
    EnvironmentShow(c_environmentTerrain, false);
    EnvironmentShow(c_environmentWater, false);
    gv_sPACE = libNtve_gf_MainActorofUnit(UnitFromId(5));
    TriggerExecute(gt_init_constants, true, false);
    Wait(3.43, c_timeGame);
    TechTreeUpgradeAddLevel(0, "CloakDriveUpgrade", 7);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7FD6118A"));
    SoundPlay(SoundLink("UI_ScoreScreenMissionName", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.77, c_timeGame);
    SoundPlay(SoundLink("UI_ReplayDropdownListSelect", 0), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_init_setupmenu_values, true, false);
    DialogCreate(227, 227, c_anchorBottomLeft, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 212, 212, c_anchorBottomLeft, -10, -10, StringToText(""), "Assets\\Textures\\ui_leaderpanel_buttonhover_terran.dds", c_triggerImageTypeNineSlice, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 500, PlayerGroupAll());
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_map_box = DialogLastCreated();
    if ((GameAttributeGameValue("1") == "0003")) {
        gv_tutorial = true;
    }
    else {
        gv_tutorial = false;
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/F0E93575"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/01BC2EB5"), StringExternal("Param/Value/717C099E"), "Assets\\Textures\\btn-ability-mengsk-blimp-propagandamode.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init_Init () {
    gt_init = TriggerCreate("gt_init_Func");
    TriggerAddEventMapInit(gt_init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: init_setupmenu_values
//--------------------------------------------------------------------------------------------------
bool gt_init_setupmenu_values_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_y_position;
    int lv_y_increment;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_y_position = 150;
    lv_y_increment = 100;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(400, 250, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 250, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_bucket_long.dds", c_triggerImageTypeNineSlice, false, Color(149*100/255,150*100/255,151*100/255), c_triggerBlendModeAdd);
    DialogSetTitle(DialogLastCreated(), (StringExternal("Param/Value/E5A2BD30") + PlayerName(gv_host)));
    gv_box_setup_values = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottom, 0, 50, StringToText(""), StringExternal("Param/Value/58D0324B"), "Assets\\Textures\\zerg-border-button-game.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeAdd, PlayerGroupAll());
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_btn_start = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(700, 500, c_anchorCenter, 500, 100, true);
    gv_box_setup_info = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 800, 600);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 125, 50);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_btn_start, PlayerGroupSingle(gv_host), true);
    TriggerExecute(gt_ui_init_hp_bar, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init_setupmenu_values_Init () {
    gt_init_setupmenu_values = TriggerCreate("gt_init_setupmenu_values_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: init_game
//--------------------------------------------------------------------------------------------------
bool gt_init_game_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_u;
    sound lv_sound;
    string lv_tmp;

    // Automatic Variable Declarations
    const int autoA9CB5625_ae = gv_const_maxdisc;
    const int autoA9CB5625_ai = 1;
    const int autoD647894F_ae = gv_const_maxdisc;
    const int autoD647894F_ai = 1;
    const int autoA7C19C2E_ae = gv_const_maxdisc;
    const int autoA7C19C2E_ai = 1;
    const int auto5A565504_ae = gv_const_maxdisc;
    const int auto5A565504_ai = 1;
    const int autoB88470B9_ae = gv_const_maxdisc;
    const int autoB88470B9_ai = 1;
    const int auto7F7FD03A_ae = gv_const_maxdisc;
    const int auto7F7FD03A_ai = 1;
    const int autoA5852815_ae = gv_const_maxdisc;
    const int autoA5852815_ai = 1;
    const int auto0A97ECE8_ae = gv_const_maxdisc;
    const int auto0A97ECE8_ai = 1;
    const int auto3E64901A_ae = gv_const_maxdisc;
    const int auto3E64901A_ai = 1;

    // Variable Initialization
    lv_tmp = "";

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_host))) {
            return false;
        }

        if (!((EventDialogControl() == gv_btn_start))) {
            return false;
        }

        if (!((gv_tutorial == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_box_setup_values, PlayerGroupAll(), false);
    DialogSetVisible(gv_box_setup_info, PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(5), "SetTintColor 1,1,1 5.000000");
    TriggerExecute(gt_bgm_sequence_maingame, true, false);
    Wait(1.0, c_timeReal);
    libNtve_gf_WaitForTimer(gv_purge_timer, 6.5, true);
    EnvironmentShow(c_environmentTerrain, true);
    EnvironmentShow(c_environmentWater, true);
    lv_i = 1;
    for ( ; ( (autoA9CB5625_ai >= 0 && lv_i <= autoA9CB5625_ae) || (autoA9CB5625_ai < 0 && lv_i >= autoA9CB5625_ae) ) ; lv_i += autoA9CB5625_ai ) {
        CatalogFieldValueSet(c_gameCatalogEffect, "NukeDamage", "Amount", lv_i, IntToString((PowI(7.0, 3.0) * 11)));
        if (((PlayerType(lv_i) == c_playerTypeUser) || (gv_aI_controller[lv_i] == true))) {
            CameraApplyInfo(lv_i, CameraInfoDefault(), 11.0, -1, 100.0, false);
            CameraPan(lv_i, UnitGetPosition(gv_base_array[lv_i]), 0.0, -1, 0.0, false);
            gv_rally_location[lv_i] = UnitGetPosition(gv_base_array[lv_i]);
            gv_base_is_active[lv_i] = true;
            PlayerGroupAdd(gv_active_players, lv_i);
            libNtve_gf_PauseUnit(gv_base_array[lv_i], false);
            UnitSetHeight(gv_base_array[lv_i], -100.0, 0.0);
            UnitBehaviorAdd(gv_base_array[lv_i], "GhostCloak", gv_base_array[lv_i], 1);
            UnitBehaviorAdd(gv_base_array[lv_i], "NoNukes", gv_base_array[lv_i], 1);
        }
        else {
            UnitRemove(gv_base_array[lv_i]);
        }
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/D4385BA4"));
    TriggerExecute(gt_leaderboard, true, false);
    libNtve_gf_WaitForTimer(gv_purge_timer, 17.3, true);
    EnvironmentShow(c_environmentDoodads, true);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(5), gf_spacecolor(gv_spacecolor));
    libNtve_gf_SendActorMessageToUnit(UnitFromId(5), "SetOpacity 0.300000");
    lv_i = 1;
    for ( ; ( (autoD647894F_ai >= 0 && lv_i <= autoD647894F_ae) || (autoD647894F_ai < 0 && lv_i >= autoD647894F_ae) ) ; lv_i += autoD647894F_ai ) {
        if ((gv_base_is_active[lv_i] == true)) {
            libNtve_gf_ShowHideUnit(gv_base_array[lv_i], true);
            VisRevealerCreate(lv_i, RegionEntireMap());
            UnitBehaviorRemove(gv_base_array[lv_i], "GhostCloak", 1);
        }

    }
    libNtve_gf_WaitForTimer(gv_purge_timer, 17.5, true);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, 0.7);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/2AD73227"));
    lv_i = 1;
    for ( ; ( (autoA7C19C2E_ai >= 0 && lv_i <= autoA7C19C2E_ae) || (autoA7C19C2E_ai < 0 && lv_i >= autoA7C19C2E_ae) ) ; lv_i += autoA7C19C2E_ai ) {
        if ((gv_base_is_active[lv_i] == true)) {
            UnitControlGroupAddUnit(lv_i, 1, gv_base_array[lv_i]);
            UnitSelect(gv_base_array[lv_i], lv_i, true);
            CameraLockInput(lv_i, false);
            UnitSetHeight(gv_base_array[lv_i], 13.0, 0.125);
            PlayerPauseAllCooldowns(lv_i, false);
        }

    }
    DialogSetVisible(gv_map_box, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("Raynor_MorosDeviceStart22", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UISetCursorVisible(PlayerGroupAll(), true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/287E31AE"));
    SoundPlayForPlayer(SoundLink("UI_TransmissionText", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_sound = SoundLastPlayed();
    Wait(3.5, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Unlock", 2), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
    lv_i = 1;
    for ( ; ( (auto5A565504_ai >= 0 && lv_i <= auto5A565504_ae) || (auto5A565504_ai < 0 && lv_i >= auto5A565504_ae) ) ; lv_i += auto5A565504_ai ) {
        if ((gv_base_is_active[lv_i] == true)) {
            CameraSetValue(lv_i, c_cameraValueDistance, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), 0.0, -1, 0.0);
        }

    }
    Wait(0.05, c_timeReal);
    lv_i = 1;
    for ( ; ( (autoB88470B9_ai >= 0 && lv_i <= autoB88470B9_ae) || (autoB88470B9_ai < 0 && lv_i >= autoB88470B9_ae) ) ; lv_i += autoB88470B9_ai ) {
        if ((gv_base_is_active[lv_i] == true)) {
            CameraSetValue(lv_i, c_cameraValuePitch, CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch), 0.0, -1, 0.0);
        }

    }
    Wait(0.8, c_timeReal);
    lv_i = 1;
    for ( ; ( (auto7F7FD03A_ai >= 0 && lv_i <= auto7F7FD03A_ae) || (auto7F7FD03A_ai < 0 && lv_i >= auto7F7FD03A_ae) ) ; lv_i += auto7F7FD03A_ai ) {
        if ((gv_base_is_active[lv_i] == true)) {
            CameraSetValue(lv_i, c_cameraValueRoll, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueRoll), 3.0, -1, 100.0);
        }

    }
    Wait(2.65, c_timeReal);
    SoundStop(lv_sound, false);
    SoundPlayForPlayer(SoundLink("UI_ReplayDropdownListSelect", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_i = 1;
    for ( ; ( (autoA5852815_ai >= 0 && lv_i <= autoA5852815_ae) || (autoA5852815_ai < 0 && lv_i >= autoA5852815_ae) ) ; lv_i += autoA5852815_ai ) {
        if ((gv_base_is_active[lv_i] == true)) {
            CameraSetValue(lv_i, c_cameraValueRoll, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueRoll), 0.0, -1, 0.0);
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/9E375BB0"));
    gf_AI_activate();
    TriggerExecute(gt_abilcheck_loop, true, false);
    Wait(7.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), PointFromId(36), 7.0, Color(0.00, 100.00, 75.29));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7C0858ED"));
    Wait(1.4, c_timeReal);
    lv_i = 1;
    for ( ; ( (auto0A97ECE8_ai >= 0 && lv_i <= auto0A97ECE8_ae) || (auto0A97ECE8_ai < 0 && lv_i >= auto0A97ECE8_ae) ) ; lv_i += auto0A97ECE8_ai ) {
        if ((UnitIsAlive(gv_base_array[lv_i]) == true)) {
            MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_base_array[lv_i]), 7.0, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false)));
            gv_disc.lv_playcount[lv_i] += 1;
            gf_burn(lv_i);
            Wait(0.14, c_timeReal);
        }

    }
    Wait(1.4, c_timeReal);
    TriggerExecute(gt_ui_refresh_hp_bar_loop, true, false);
    SoundPlayForPlayer(SoundLink("UI_ReplayDropdownListSelect", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    BoardShowAll(true, PlayerGroupAll());
    TriggerExecute(gt_spawn_loop, true, false);
    lv_i = 1;
    for ( ; ( (auto3E64901A_ai >= 0 && lv_i <= auto3E64901A_ae) || (auto3E64901A_ai < 0 && lv_i >= auto3E64901A_ae) ) ; lv_i += auto3E64901A_ai ) {
        if ((gv_base_is_active[lv_i] == true)) {
            UnitBehaviorRemove(gv_base_array[lv_i], "NoNukes", 1);
        }

    }
    Wait(14.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/304540E6"));
    Wait(14.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1BA6A432"));
    Wait(14.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3BEED82D"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init_game_Init () {
    gt_init_game = TriggerCreate("gt_init_game_Func");
    TriggerAddEventDialogControl(gt_init_game, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: init_tutorial
//--------------------------------------------------------------------------------------------------
bool gt_init_tutorial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_u;
    string lv_tmp;

    // Automatic Variable Declarations
    const int autoCE387C00_ae = gv_const_maxdisc;
    const int autoCE387C00_ai = 1;
    const int auto03DFC5B7_ae = gv_const_maxdisc;
    const int auto03DFC5B7_ai = 1;
    const int auto9CF4C0C9_ae = gv_const_maxdisc;
    const int auto9CF4C0C9_ai = 1;
    const int auto85BB4ED2_ae = gv_const_maxdisc;
    const int auto85BB4ED2_ai = 1;

    // Variable Initialization
    lv_tmp = "";

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_host))) {
            return false;
        }

        if (!((EventDialogControl() == gv_btn_start))) {
            return false;
        }

        if (!((gv_tutorial == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_box_setup_values, PlayerGroupAll(), false);
    DialogSetVisible(gv_box_setup_info, PlayerGroupAll(), false);
    UISetCursorVisible(PlayerGroupAll(), false);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(5), "SetTintColor 1,1,1 5.000000");
    TriggerExecute(gt_bgm_sequence_tutorial, true, false);
    Wait(5.5, c_timeReal);
    libNtve_gf_WaitForTimer(gv_purge_timer, 6.5, true);
    EnvironmentShow(c_environmentTerrain, true);
    EnvironmentShow(c_environmentWater, true);
    lv_i = 1;
    for ( ; ( (autoCE387C00_ai >= 0 && lv_i <= autoCE387C00_ae) || (autoCE387C00_ai < 0 && lv_i >= autoCE387C00_ae) ) ; lv_i += autoCE387C00_ai ) {
        CatalogFieldValueSet(c_gameCatalogEffect, "NukeDamage", "Amount", lv_i, IntToString((PowI(7.0, 3.0) * 11)));
        if (((PlayerType(lv_i) == c_playerTypeUser) || (gv_aI_controller[lv_i] == true))) {
            CameraApplyInfo(lv_i, CameraInfoDefault(), 21.0, -1, 100.0, false);
            CameraPan(lv_i, UnitGetPosition(gv_base_array[lv_i]), 0.0, -1, 0.0, false);
            gv_rally_location[lv_i] = UnitGetPosition(gv_base_array[lv_i]);
            gv_base_is_active[lv_i] = true;
            PlayerGroupAdd(gv_active_players, lv_i);
            libNtve_gf_PauseUnit(gv_base_array[lv_i], false);
            UnitSetHeight(gv_base_array[lv_i], -100.0, 0.0);
            UnitBehaviorAdd(gv_base_array[lv_i], "GhostCloak", gv_base_array[lv_i], 1);
        }
        else {
            UnitRemove(gv_base_array[lv_i]);
        }
    }
    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_active_players, c_allianceIdChat, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/EC447A43"));
    libNtve_gf_WaitForTimer(gv_purge_timer, 24.7, true);
    EnvironmentShow(c_environmentDoodads, true);
    libNtve_gf_SendActorMessageToUnit(UnitFromId(5), gf_spacecolor(gv_spacecolor));
    libNtve_gf_SendActorMessageToUnit(UnitFromId(5), "SetOpacity 0.300000");
    lv_i = 1;
    for ( ; ( (auto03DFC5B7_ai >= 0 && lv_i <= auto03DFC5B7_ae) || (auto03DFC5B7_ai < 0 && lv_i >= auto03DFC5B7_ae) ) ; lv_i += auto03DFC5B7_ai ) {
        if ((gv_base_is_active[lv_i] == true)) {
            libNtve_gf_ShowHideUnit(gv_base_array[lv_i], true);
            VisRevealerCreate(lv_i, RegionEntireMap());
            UnitBehaviorRemove(gv_base_array[lv_i], "GhostCloak", 1);
        }

    }
    libNtve_gf_WaitForTimer(gv_purge_timer, 25.2, true);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, 0.7);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/1CB9A7F6"));
    lv_i = 1;
    for ( ; ( (auto9CF4C0C9_ai >= 0 && lv_i <= auto9CF4C0C9_ae) || (auto9CF4C0C9_ai < 0 && lv_i >= auto9CF4C0C9_ae) ) ; lv_i += auto9CF4C0C9_ai ) {
        if ((gv_base_is_active[lv_i] == true)) {
            UnitControlGroupAddUnit(lv_i, 1, gv_base_array[lv_i]);
            UnitSelect(gv_base_array[lv_i], lv_i, true);
            CameraLockInput(lv_i, false);
            UnitSetHeight(gv_base_array[lv_i], 13.0, 0.125);
        }

    }
    DialogSetVisible(gv_map_box, PlayerGroupAll(), true);
    SoundPlayForPlayer(SoundLink("Raynor_MorosDeviceStart2", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UISetCursorVisible(PlayerGroupAll(), true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5295BDE4"));
    Wait(7.0, c_timeReal);
    TriggerExecute(gt_abilcheck_loop, true, false);
    Wait(7.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    MinimapPing(PlayerGroupAll(), PointFromId(36), 7.0, Color(0.00, 100.00, 75.29));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7020CAF5"));
    Wait(1.4, c_timeReal);
    lv_i = 1;
    for ( ; ( (auto85BB4ED2_ai >= 0 && lv_i <= auto85BB4ED2_ae) || (auto85BB4ED2_ai < 0 && lv_i >= auto85BB4ED2_ae) ) ; lv_i += auto85BB4ED2_ai ) {
        if ((UnitIsAlive(gv_base_array[lv_i]) == true)) {
            MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_base_array[lv_i]), 7.0, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false)));
            gv_disc.lv_playcount[lv_i] += 1;
            gf_burn(lv_i);
            Wait(0.14, c_timeReal);
        }

    }
    Wait(1.4, c_timeReal);
    TriggerExecute(gt_ui_refresh_hp_bar_loop, true, false);
    SoundPlayForPlayer(SoundLink("UI_ReplayDropdownListSelect", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/A5D35DD9"));
    BoardShowAll(true, PlayerGroupAll());
    TriggerExecute(gt_tutorial_01, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init_tutorial_Init () {
    gt_init_tutorial = TriggerCreate("gt_init_tutorial_Func");
    TriggerAddEventDialogControl(gt_init_tutorial, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tutorial_01
//--------------------------------------------------------------------------------------------------
bool gt_tutorial_01_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_location;
    unitgroup lv_targetgroup;

    // Automatic Variable Declarations
    playergroup autoCE746540_g;
    int autoCE746540_var;
    const int autoC1652A2C_ae = 3;
    int autoC1652A2C_var;
    playergroup autoF1085DD2_g;
    int autoF1085DD2_var;
    playergroup auto70AFC9D4_g;
    int auto70AFC9D4_var;
    playergroup auto78E17A74_g;
    int auto78E17A74_var;
    const int auto108E8A0D_ae = 1;
    int auto108E8A0D_var;

    // Variable Initialization
    lv_targetgroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoCE746540_g = gv_active_players;
    autoCE746540_var = -1;
    while (true) {
        autoCE746540_var = PlayerGroupNextPlayer(autoCE746540_g, autoCE746540_var);
        if (autoCE746540_var < 0) { break; }
        TechTreeAbilityAllow(autoCE746540_var, AbilityCommand("MassCloakdrive", 0), false);
    }
    Wait(14.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5CC34E07"));
    TriggerExecute(gt_spawn_loop, true, false);
    Wait(14.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/AA6C3A95"));
    Wait(14.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E75899E5"));
    Wait(14.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4B26A219"));
    Wait(14.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EA0A9FC8"));
    autoC1652A2C_var = 1;
    for ( ; autoC1652A2C_var <= autoC1652A2C_ae; autoC1652A2C_var += 1 ) {
        lv_location = gf_get_randompoint_far(UnitGetPosition(gv_base_array[1]));
        UnitCreate(7, "DuskWing", 0, 15, lv_location, libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_targetgroup, UnitLastCreatedGroup());
        while ((UnitGroupCount(lv_targetgroup, c_unitCountAlive) > 0)) {
            MinimapPing(PlayerGroupAll(), lv_location, 2.0, Color(100.00, 0.00, 0.00));
            Wait(3.0, c_timeGame);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/6324CBD5") + IntToText(autoC1652A2C_var) + StringExternal("Param/Value/E2025BF4")));
    }
    Wait(14.0, c_timeReal);
    autoF1085DD2_g = gv_active_players;
    autoF1085DD2_var = -1;
    while (true) {
        autoF1085DD2_var = PlayerGroupNextPlayer(autoF1085DD2_g, autoF1085DD2_var);
        if (autoF1085DD2_var < 0) { break; }
        PlayerModifyPropertyFixed(autoF1085DD2_var, c_playerPropMinerals, c_playerPropOperSetTo, 10000.0);
    }
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D75208DF"));
    Wait(14.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0B6DAEEF"));
    Wait(21.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D59092BB"));
    Wait(14.0, c_timeReal);
    auto70AFC9D4_g = gv_active_players;
    auto70AFC9D4_var = -1;
    while (true) {
        auto70AFC9D4_var = PlayerGroupNextPlayer(auto70AFC9D4_g, auto70AFC9D4_var);
        if (auto70AFC9D4_var < 0) { break; }
        TechTreeAbilityAllow(auto70AFC9D4_var, AbilityCommand("MassCloakdrive", 0), true);
        libNtve_gf_UnitAbilityRemoveCooldown(gv_base_array[auto70AFC9D4_var], "MassCloakdrive", "Abil/CloakDriveMass");
    }
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F3502E6F"));
    Wait(28.0, c_timeReal);
    auto78E17A74_g = gv_active_players;
    auto78E17A74_var = -1;
    while (true) {
        auto78E17A74_var = PlayerGroupNextPlayer(auto78E17A74_g, auto78E17A74_var);
        if (auto78E17A74_var < 0) { break; }
        PlayerModifyPropertyFixed(auto78E17A74_var, c_playerPropMinerals, c_playerPropOperSetTo, 50000.0);
        libNtve_gf_UnitAbilityRemoveCooldown(gv_base_array[auto78E17A74_var], "MassCloakdrive", "Abil/CloakDriveMass");
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0564F4E1"));
    auto108E8A0D_var = 1;
    for ( ; auto108E8A0D_var <= auto108E8A0D_ae; auto108E8A0D_var += 1 ) {
        lv_location = gf_get_randompoint_far(UnitGetPosition(gv_base_array[1]));
        UnitCreate(14, "Battlecruiser", 0, 15, lv_location, libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_targetgroup, UnitLastCreatedGroup());
        UnitCreate(7, "Raven", 0, 15, lv_location, libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_targetgroup, UnitLastCreatedGroup());
        while ((UnitGroupCount(lv_targetgroup, c_unitCountAlive) > 0)) {
            MinimapPing(PlayerGroupAll(), lv_location, 2.0, Color(100.00, 0.00, 0.00));
            Wait(3.0, c_timeGame);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/1AF2E0D2") + IntToText(auto108E8A0D_var) + StringExternal("Param/Value/FD83E6E9")));
    }
    Wait(14.0, c_timeReal);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "BansheeOSTT2", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F124F810"));
    Wait(14.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CD0196A2"));
    Wait(14.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FF6A47F4"));
    Wait(14.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F43AC23A"));
    Wait(14.0, c_timeReal);
    SoundPlayForPlayer(SoundLink("UI_Bnet_PopUp_Generic", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0F8CE0AC"));
    Wait(18.0, c_timeReal);
    SoundPlay(SoundLink("UI_Bnet_PopUp_Generic", 2), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/23FFAA08"));
    Wait(14.0, c_timeReal);
    SoundPlay(SoundLink("UI_Bnet_PopUp_Generic", 2), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/11C8B17F"));
    TriggerExecute(gt_tutorial_sandbox, true, false);
    Wait(14.0, c_timeReal);
    SoundPlay(SoundLink("UI_Bnet_PopUp_Generic", 2), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/610F595E"));
    Wait(14.0, c_timeReal);
    SoundPlay(SoundLink("UI_Bnet_PopUp_Generic", 2), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3CF50DAA"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tutorial_01_Init () {
    gt_tutorial_01 = TriggerCreate("gt_tutorial_01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: tutorial_sandbox
//--------------------------------------------------------------------------------------------------
bool gt_tutorial_sandbox_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_location;
    unitgroup lv_targetgroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetgroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_location = gf_get_randompoint_far(UnitGetPosition(gv_base_array[1]));
        UnitCreate(21, "DuskWing", 0, 15, lv_location, libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_targetgroup, UnitLastCreatedGroup());
        UnitCreate(14, "Battlecruiser", 0, 15, lv_location, libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_targetgroup, UnitLastCreatedGroup());
        UnitCreate(7, "Raven", 0, 15, lv_location, libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_targetgroup, UnitLastCreatedGroup());
        while ((UnitGroupCount(lv_targetgroup, c_unitCountAlive) > 0)) {
            MinimapPing(PlayerGroupAll(), lv_location, 2.0, Color(100.00, 0.00, 0.00));
            PlayerModifyPropertyFixed(1, c_playerPropMinerals, c_playerPropOperAdd, 1000.0);
            Wait(3.0, c_timeGame);
        }
        libNtve_gf_UnitAbilityRemoveCooldown(gv_base_array[1], "MassCloakdrive", "Abil/CloakDriveMass");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tutorial_sandbox_Init () {
    gt_tutorial_sandbox = TriggerCreate("gt_tutorial_sandbox_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ui_init_hp_bar
//--------------------------------------------------------------------------------------------------
bool gt_ui_init_hp_bar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(1050, 75, c_anchorBottom, 0, -36, true);
    gv_bar_box = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 960, 13, c_anchorLeft, 45, 0, StringToText(""), "Assets\\Textures\\ui_loadingbar_metalframe_teran.dds", c_triggerImageTypeNineSlice, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1000, 59, c_anchorLeft, 25, 0, StringToText(""), "Assets\\Textures\\ui_loadingbar_bar_highlighted_terran.dds", c_triggerImageTypeNineSlice, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_bar = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 50, c_anchorCenter, 0, -10, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Cloakdrive14", PlayerGroupAll());
    gv_bar_txt = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ui_init_hp_bar_Init () {
    gt_ui_init_hp_bar = TriggerCreate("gt_ui_init_hp_bar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ui_refresh_hp_bar_loop
//--------------------------------------------------------------------------------------------------
bool gt_ui_refresh_hp_bar_loop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[gv_const_maxdisc + 1] lv_bar_size;

    // Automatic Variable Declarations
    playergroup auto669A4560_g;
    int auto669A4560_var;
    playergroup autoCE699BC0_g;
    int autoCE699BC0_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto669A4560_g = gv_active_players;
    auto669A4560_var = -1;
    while (true) {
        auto669A4560_var = PlayerGroupNextPlayer(auto669A4560_g, auto669A4560_var);
        if (auto669A4560_var < 0) { break; }
        lv_bar_size[auto669A4560_var] = UnitGetPropertyFixed(gv_base_array[auto669A4560_var], c_unitPropLife, c_unitPropCurrent);
        libNtve_gf_SetDialogItemText(gv_bar_txt, FixedToText(lv_bar_size[auto669A4560_var], 0), PlayerGroupSingle(auto669A4560_var));
        DialogControlSetSize(gv_bar, PlayerGroupSingle(auto669A4560_var), FixedToInt(((lv_bar_size[auto669A4560_var] / 80.0) + 27.7875)), 59);
    }
    DialogSetVisible(gv_bar_box, PlayerGroupAll(), true);
    while (true) {
        autoCE699BC0_g = gv_active_players;
        autoCE699BC0_var = -1;
        while (true) {
            autoCE699BC0_var = PlayerGroupNextPlayer(autoCE699BC0_g, autoCE699BC0_var);
            if (autoCE699BC0_var < 0) { break; }
            lv_bar_size[autoCE699BC0_var] += ((UnitGetPropertyFixed(gv_base_array[autoCE699BC0_var], c_unitPropLife, c_unitPropCurrent) - lv_bar_size[autoCE699BC0_var]) / 2.0);
            libNtve_gf_SetDialogItemText(gv_bar_txt, FixedToText(lv_bar_size[autoCE699BC0_var], 0), PlayerGroupSingle(autoCE699BC0_var));
            DialogControlSetSize(gv_bar, PlayerGroupSingle(autoCE699BC0_var), FixedToInt(((lv_bar_size[autoCE699BC0_var] / 80.0) + 27.7875)), 59);
        }
        Wait(0.02, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ui_refresh_hp_bar_loop_Init () {
    gt_ui_refresh_hp_bar_loop = TriggerCreate("gt_ui_refresh_hp_bar_loop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ui_refresh_maingame_timer_loop
//--------------------------------------------------------------------------------------------------
bool gt_ui_refresh_maingame_timer_loop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        BoardItemSetText(gv_board, 2, 1, (StringExternal("Param/Value/B60DF783") + TextTimeFormat(StringToText("<min2/>:<sec2/>"), CeilingI(TimerGetRemaining(gv_purge_timer)))));
        Wait(0.3, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ui_refresh_maingame_timer_loop_Init () {
    gt_ui_refresh_maingame_timer_loop = TriggerCreate("gt_ui_refresh_maingame_timer_loop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade_detect
//--------------------------------------------------------------------------------------------------
bool gt_upgrade_detect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    abilcmd autoC90C01CE_val;

    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    autoC90C01CE_val = EventUnitAbility();
    if (autoC90C01CE_val == AbilityCommand("StarportTechLabResearch", 1)) {
        gv_banshee_worth[lv_p] += 1;
    }
    else if (autoC90C01CE_val == AbilityCommand("StarportTechLabResearch", 6)) {
        gv_banshee_worth[lv_p] += 7;
    }
    else if (autoC90C01CE_val == AbilityCommand("StarportTechLabResearch", 7)) {
        gv_banshee_worth[lv_p] += 49;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/0C4B523B") + PlayerName(lv_p) + StringExternal("Param/Value/C9F9B0C7")));
        SoundPlayForPlayer(SoundLink("WidowMine_ArmedBeep", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoC90C01CE_val == AbilityCommand("StarportTechLabResearch", 8)) {
        gv_banshee_worth[lv_p] += 49;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/14447F34") + PlayerName(lv_p) + StringExternal("Param/Value/0D25A7EC")));
        SoundPlayForPlayer(SoundLink("WidowMine_ArmedBeep", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoC90C01CE_val == AbilityCommand("StarportTechLabResearch", 9)) {
        gv_banshee_worth[lv_p] += 49;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/A28069EF") + PlayerName(lv_p) + StringExternal("Param/Value/18384A10")));
        SoundPlayForPlayer(SoundLink("WidowMine_ArmedBeep", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgrade_detect_Init () {
    gt_upgrade_detect = TriggerCreate("gt_upgrade_detect_Func");
    TriggerAddEventUnitAbility(gt_upgrade_detect, null, AbilityCommand("StarportTechLabResearch", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_upgrade_detect, null, AbilityCommand("StarportTechLabResearch", 6), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_upgrade_detect, null, AbilityCommand("StarportTechLabResearch", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_upgrade_detect, null, AbilityCommand("StarportTechLabResearch", 8), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_upgrade_detect, null, AbilityCommand("StarportTechLabResearch", 9), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cloakdrive_upgrade_detect
//--------------------------------------------------------------------------------------------------
bool gt_cloakdrive_upgrade_detect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitAbilityRemoveCooldown(gv_base_array[lv_p], "MassCloakdrive", "Abil/CloakDriveMass");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cloakdrive_upgrade_detect_Init () {
    gt_cloakdrive_upgrade_detect = TriggerCreate("gt_cloakdrive_upgrade_detect_Func");
    TriggerAddEventUnitAbility(gt_cloakdrive_upgrade_detect, null, AbilityCommand("StarportTechLabResearch", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: init_constants
//--------------------------------------------------------------------------------------------------
bool gt_init_constants_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_const_tierunit_worth[1] = 7;
    gv_const_tierunit_worth[2] = 49;
    gv_const_tierunit_worth[3] = 343;
    gv_const_tierunit_worth[4] = 2401;
    gv_const_tierunit_worth[5] = 16807;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init_constants_Init () {
    gt_init_constants = TriggerCreate("gt_init_constants_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: cloakdrive_event
//--------------------------------------------------------------------------------------------------
bool gt_cloakdrive_event_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    point lv_destination;
    fixed lv_angle;
    fixed lv_distance;
    fixed lv_k;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_destination = EventUnitTargetPoint();
    lv_k = 0.2;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_u, "CloakspaceTurbineActive") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(UnitGetPosition(lv_u), lv_destination);
    lv_distance = DistanceBetweenPoints(UnitGetPosition(lv_u), lv_destination);
    SoundPlayOnUnitForPlayer(SoundLink("Battlecruiser_YamatoAttackChargeUp", -1), c_maxPlayers, PlayerGroupAll(), lv_u, 0.0, 100.0, 0.0);
    gf_cloakdrive_send_unit(lv_u, lv_angle, lv_distance);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cloakdrive_event_Init () {
    gt_cloakdrive_event = TriggerCreate("gt_cloakdrive_event_Func");
    TriggerAddEventUnitAbility(gt_cloakdrive_event, null, AbilityCommand("ForceField", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cloakturbine_charged
//--------------------------------------------------------------------------------------------------
bool gt_cloakturbine_charged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_u) == "VoidSeeker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnitForPlayer(SoundLink("StarShip_Adun_Turret_Mech_Charge", -1), c_maxPlayers, PlayerGroupAll(), lv_u, 0.0, 100.0, 0.0);
    Wait(1.0, c_timeGame);
    if ((gv_turbine_tip[lv_p] == false)) {
        gv_turbine_tip[lv_p] = true;
        gf_showtip(PlayerGroupSingle(lv_p), 28);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cloakturbine_charged_Init () {
    gt_cloakturbine_charged = TriggerCreate("gt_cloakturbine_charged_Func");
    TriggerAddEventUnitBehaviorChange(gt_cloakturbine_charged, null, "WeaponTypeB", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cloakturbine_up
//--------------------------------------------------------------------------------------------------
bool gt_cloakturbine_up_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    point lv_destination;
    fixed lv_angle;
    fixed lv_distance;
    fixed lv_k;

    // Automatic Variable Declarations
    const int auto216EA748_n = 28;
    int auto216EA748_i;

    // Variable Initialization
    lv_u = EventUnit();
    lv_destination = EventUnitTargetPoint();
    lv_k = 0.2;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_u, "CloakspaceTurbineActive") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(UnitGetPosition(lv_u), lv_destination);
    lv_distance = DistanceBetweenPoints(UnitGetPosition(lv_u), lv_destination);
    UnitIssueOrder(lv_u, OrderTargetingPoint(AbilityCommand("move", 0), lv_destination), c_orderQueueReplace);
    libNtve_gf_MakeUnitUncommandable(lv_u, true);
    SoundPlayOnUnitForPlayer(SoundLink("AdunGeneratorPowerUpSound", -1), c_maxPlayers, PlayerGroupAll(), lv_u, 0.0, 100.0, 0.0);
    gf_cloakturbine_alarm(0, UnitGetPosition(lv_u));
    for (auto216EA748_i = 1; auto216EA748_i <= auto216EA748_n; auto216EA748_i += 1) {
        lv_k *= 1.3;
        libNtve_gf_SendActorMessageToUnit(lv_u, (("AnimSetTimeScale Spin " + FixedToString(lv_k, 1))));
        Wait(0.25, c_timeGame);
    }
    libNtve_gf_MakeUnitUncommandable(lv_u, false);
    SoundPlayOnUnitForPlayer(SoundLink("Battlecruiser_YamatoAttackChargeUp2", -1), c_maxPlayers, PlayerGroupAll(), lv_u, 0.0, 700.0, 0.0);
    gf_cloakdrive_send_unit_turbine(lv_u, lv_angle, lv_distance);
    Wait(4.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cloakturbine_up_Init () {
    gt_cloakturbine_up = TriggerCreate("gt_cloakturbine_up_Func");
    TriggerAddEventUnitAbility(gt_cloakturbine_up, null, AbilityCommand("CloakdriveTurbine", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_cloakturbine_up, null, AbilityCommand("ForceField", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cloakturbine_dn
//--------------------------------------------------------------------------------------------------
bool gt_cloakturbine_dn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_k;
    unit lv_u;

    // Automatic Variable Declarations
    const int auto003E98AF_n = 14;
    int auto003E98AF_i;

    // Variable Initialization
    lv_k = 100.0;
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnitForPlayer(SoundLink("Pylon_Containment_Unit_Power_Down", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    for (auto003E98AF_i = 1; auto003E98AF_i <= auto003E98AF_n; auto003E98AF_i += 1) {
        lv_k /= 1.4;
        libNtve_gf_SendActorMessageToUnit(lv_u, (("AnimSetTimeScale Spin " + FixedToString(lv_k, 1))));
        Wait(0.25, c_timeReal);
    }
    libNtve_gf_SendActorMessageToUnit(lv_u, (("AnimSetTimeScale Spin " + FixedToString(0.2, 1))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cloakturbine_dn_Init () {
    gt_cloakturbine_dn = TriggerCreate("gt_cloakturbine_dn_Func");
    TriggerAddEventUnitBehaviorChange(gt_cloakturbine_dn, null, "CloakspaceTurbineActive2", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HQ_masswarp
//--------------------------------------------------------------------------------------------------
bool gt_HQ_masswarp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    point lv_destination;
    point lv_location;
    fixed lv_angle;
    fixed lv_distance;

    // Automatic Variable Declarations
    unitgroup autoBD1313A4_g;
    int autoBD1313A4_u;
    unit autoBD1313A4_var;
    unitgroup auto38A5B91C_g;
    int auto38A5B91C_u;
    unit auto38A5B91C_var;
    unitgroup autoA949C6D0_g;
    int autoA949C6D0_u;
    unit autoA949C6D0_var;
    unitgroup autoDE1435D2_g;
    int autoDE1435D2_u;
    unit autoDE1435D2_var;
    unitgroup auto494A5B5F_g;
    int auto494A5B5F_u;
    unit auto494A5B5F_var;
    unitgroup auto47E022D2_g;
    int auto47E022D2_u;
    unit auto47E022D2_var;

    // Variable Initialization
    lv_u = EventUnit();
    lv_destination = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(UnitGetPosition(lv_u), lv_destination);
    lv_distance = DistanceBetweenPoints(UnitGetPosition(lv_u), lv_destination);
    lv_location = UnitGetPosition(lv_u);
    UnitBehaviorRemove(lv_u, "SpawnProtection", 1);
    libNtve_gf_SendActorMessageToUnit(lv_u, "HaloStop");
    gf_HQ_warp_voice(lv_u);
    SoundPlayOnUnitForPlayer(SoundLink("Battlecruiser_YamatoAttackChargeUp", -1), c_maxPlayers, PlayerGroupAll(), lv_u, 0.0, 100.0, 0.0);
    lv_p = UnitGetOwner(lv_u);
    gv_masscloak_tip[lv_p] = false;
    UIDisplayMessage(PlayerGroupSingle(lv_p), c_messageAreaError, StringExternal("Param/Value/F0E12982"));
    gf_HQ_inbound_alarm(lv_p, lv_destination);
    Wait(0.02, c_timeReal);
    autoBD1313A4_g = UnitGroupSearch("DuskWing", lv_p, lv_location, 19.6, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBD1313A4_u = UnitGroupCount(autoBD1313A4_g, c_unitCountAll);
    for (;; autoBD1313A4_u -= 1) {
        autoBD1313A4_var = UnitGroupUnitFromEnd(autoBD1313A4_g, autoBD1313A4_u);
        if (autoBD1313A4_var == null) { break; }
        gf_cloakdrive_send_unit(autoBD1313A4_var, lv_angle, lv_distance);
        Wait(0.04, c_timeReal);
    }
    auto38A5B91C_g = UnitGroupSearch("Battlecruiser", lv_p, lv_location, 19.6, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38A5B91C_u = UnitGroupCount(auto38A5B91C_g, c_unitCountAll);
    for (;; auto38A5B91C_u -= 1) {
        auto38A5B91C_var = UnitGroupUnitFromEnd(auto38A5B91C_g, auto38A5B91C_u);
        if (auto38A5B91C_var == null) { break; }
        gf_cloakdrive_send_unit(auto38A5B91C_var, lv_angle, lv_distance);
        Wait(0.06, c_timeReal);
    }
    autoA949C6D0_g = UnitGroupSearch("Raven", lv_p, lv_location, 19.6, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA949C6D0_u = UnitGroupCount(autoA949C6D0_g, c_unitCountAll);
    for (;; autoA949C6D0_u -= 1) {
        autoA949C6D0_var = UnitGroupUnitFromEnd(autoA949C6D0_g, autoA949C6D0_u);
        if (autoA949C6D0_var == null) { break; }
        gf_cloakdrive_send_unit(autoA949C6D0_var, lv_angle, lv_distance);
        Wait(0.08, c_timeReal);
    }
    autoDE1435D2_g = UnitGroupSearch("Liberator", lv_p, lv_location, 19.6, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDE1435D2_u = UnitGroupCount(autoDE1435D2_g, c_unitCountAll);
    for (;; autoDE1435D2_u -= 1) {
        autoDE1435D2_var = UnitGroupUnitFromEnd(autoDE1435D2_g, autoDE1435D2_u);
        if (autoDE1435D2_var == null) { break; }
        gf_cloakdrive_send_unit(autoDE1435D2_var, lv_angle, lv_distance);
        Wait(0.1, c_timeReal);
    }
    auto494A5B5F_g = UnitGroupSearch("LiberatorAG", lv_p, lv_location, 19.6, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto494A5B5F_u = UnitGroupCount(auto494A5B5F_g, c_unitCountAll);
    for (;; auto494A5B5F_u -= 1) {
        auto494A5B5F_var = UnitGroupUnitFromEnd(auto494A5B5F_g, auto494A5B5F_u);
        if (auto494A5B5F_var == null) { break; }
        gf_cloakdrive_send_unit(auto494A5B5F_var, lv_angle, lv_distance);
        Wait(0.1, c_timeReal);
    }
    auto47E022D2_g = UnitGroupSearch("VoidSeeker", lv_p, lv_location, 19.6, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto47E022D2_u = UnitGroupCount(auto47E022D2_g, c_unitCountAll);
    for (;; auto47E022D2_u -= 1) {
        auto47E022D2_var = UnitGroupUnitFromEnd(auto47E022D2_g, auto47E022D2_u);
        if (auto47E022D2_var == null) { break; }
        gf_cloakdrive_send_unit(auto47E022D2_var, lv_angle, lv_distance);
        Wait(0.12, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HQ_masswarp_Init () {
    gt_HQ_masswarp = TriggerCreate("gt_HQ_masswarp_Func");
    TriggerAddEventUnitAbility(gt_HQ_masswarp, null, AbilityCommand("MassCloakdrive", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: resistFX
//--------------------------------------------------------------------------------------------------
bool gt_resistFX_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnitForPlayer(SoundLink("Immortal_HardenedShieldImpact", -1), c_maxPlayers, PlayerGroupAll(), lv_u, 0.0, 100.0, 0.0);
    CameraShakeStart(UnitGetOwner(EventUnit()), c_cameraPositionTarget, c_cameraDirectionXYZ, (Log2(EventUnitDamageAbsorbed()) / 50.0), 4.0, 100.0, 0.05);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_resistFX_Init () {
    gt_resistFX = TriggerCreate("gt_resistFX_Func");
    TriggerAddEventUnitDamageAbsorbed(gt_resistFX, null, "VoodooShield");
    TriggerAddEventUnitDamageAbsorbed(gt_resistFX, null, "SpawnProtection");
}

//--------------------------------------------------------------------------------------------------
// Trigger: relay_setup
//--------------------------------------------------------------------------------------------------
bool gt_relay_setup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_destination;
    point lv_location;
    fixed lv_angle;
    fixed lv_distance;
    unit lv_u;
    unit lv_dU_origin;
    unit lv_dU_destination;
    int lv_p;

    // Automatic Variable Declarations
    unitgroup autoD825A967_g;
    int autoD825A967_u;
    unit autoD825A967_var;

    // Variable Initialization
    lv_destination = EventUnitTargetPoint();
    lv_u = EventUnit();
    lv_dU_origin = EventUnit();
    lv_dU_destination = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = UnitGetOwner(lv_u);
    UnitBehaviorAdd(lv_u, "CloakfieldRelay", lv_u, 1);
    libNtve_gf_MakeUnitFacePoint(lv_u, lv_destination, 0.7);
    lv_angle = AngleBetweenPoints(UnitGetPosition(lv_u), lv_destination);
    lv_angle = ModF((lv_angle - 90.0), 360.0);
    Wait(1.0, c_timeGame);
    UnitCreate(1, "GuideArrowUnit", c_unitCreateIgnorePlacement, 1, UnitGetPosition(lv_u), lv_angle);
    lv_dU_origin = UnitLastCreated();
    UnitCreate(1, "GuideArrowUnitRed", c_unitCreateIgnorePlacement, 1, lv_destination, lv_angle);
    lv_dU_destination = UnitLastCreated();
    while ((UnitHasBehavior2(lv_u, "CloakfieldRelay") == true) && (UnitIsAlive(lv_u) == true)) {
        lv_location = UnitGetPosition(lv_u);
        lv_angle = AngleBetweenPoints(lv_location, lv_destination);
        lv_distance = DistanceBetweenPoints(lv_location, lv_destination);
        autoD825A967_g = UnitGroupSearch(null, lv_p, lv_location, 19.6, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoD825A967_u = UnitGroupCount(autoD825A967_g, c_unitCountAll);
        for (;; autoD825A967_u -= 1) {
            autoD825A967_var = UnitGroupUnitFromEnd(autoD825A967_g, autoD825A967_u);
            if (autoD825A967_var == null) { break; }
            UnitBehaviorRemove(autoD825A967_var, "GhostCloak", 1);
            UnitBehaviorRemove(autoD825A967_var, "Superspeed", 1);
            gf_cloakdrive_send_unit(autoD825A967_var, lv_angle, lv_distance);
        }
        Wait(0.05, c_timeGame);
    }
    GameDestroyEffects(lv_destination, 0.1, 1, "CloakDriveDummyMassLonger");
    UnitRemove(lv_dU_origin);
    UnitRemove(lv_dU_destination);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_relay_setup_Init () {
    gt_relay_setup = TriggerCreate("gt_relay_setup_Func");
    TriggerAddEventUnitAbility(gt_relay_setup, null, AbilityCommand("ArbiterMPRecall", 0), c_unitAbilStageExecute, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: relay_cancel
//--------------------------------------------------------------------------------------------------
bool gt_relay_cancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_u = EventUnit();
    UnitBehaviorRemove(lv_u, "CloakfieldRelay", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_relay_cancel_Init () {
    gt_relay_cancel = TriggerCreate("gt_relay_cancel_Func");
    TriggerAddEventUnitAbility(gt_relay_cancel, null, AbilityCommand("TaurenStimpack", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: rift_FX
//--------------------------------------------------------------------------------------------------
bool gt_rift_FX_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    actor lv_fX;
    point lv_location;
    int lv_p;

    // Automatic Variable Declarations
    const int auto65DDD364_n = 28;
    int auto65DDD364_i;

    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((lv_p != 16))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(lv_u, true);
    CameraShakeStart(lv_p, c_cameraPositionTarget, c_cameraDirectionZ, 0.07, 4.0, 100.0, 14.0);
    lv_location = UnitGetPosition(lv_u);
    RegionAddCircle(gv_blackhole_map, true, lv_location, 14.7);
    Wait(14.0, c_timeGame);
    CameraShakeStart(lv_p, c_cameraPositionTarget, c_cameraDirectionZ, 0.7, 4.0, 100.0, 1.0);
    CameraSetValue(lv_p, c_cameraValueFieldOfView, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueFieldOfView) - 30.0), 1.0, -1, 100.0);
    Wait(1.0, c_timeGame);
    UnitRemove(lv_u);
    CameraShakeStart(lv_p, c_cameraPositionTarget, c_cameraDirectionZ, 7.0, 4.0, 100.0, 0.1);
    CameraSetValue(lv_p, c_cameraValueFieldOfView, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueFieldOfView), 0.0, -1, 100.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E04B0090"));
    SoundPlay(SoundLink("WidowMine_ArmedBeep", -1), PlayerGroupAll(), 100.0, 0.0);
    for (auto65DDD364_i = 1; auto65DDD364_i <= auto65DDD364_n; auto65DDD364_i += 1) {
        Wait(1.0, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 15, lv_location);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_rift_FX_Init () {
    gt_rift_FX = TriggerCreate("gt_rift_FX_Func");
    TriggerAddEventUnitAbility(gt_rift_FX, null, AbilityCommand("GuardianShield", 0), c_unitAbilStageExecute, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: inhibitor
//--------------------------------------------------------------------------------------------------
bool gt_inhibitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    actor lv_fX;
    int lv_r;

    // Automatic Variable Declarations
    const int auto91CC0002_n = 49;
    int auto91CC0002_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_u = EventUnit();
    CameraShakeStart(UnitGetOwner(lv_u), c_cameraPositionTarget, c_cameraDirectionXYZ, 0.7, 4.0, 100.0, 0.1);
    SoundPlayAtPointForPlayer(SoundLink("InhibitorActivate", -1), c_maxPlayers, PlayerGroupAll(), libNtve_gf_PointWithZOffset(UnitGetPosition(lv_u), 0.0), 0.0, 100.0, 0.0);
    libNtve_gf_AttachModelToUnit(lv_u, "InhibitorActivateFlare", "Ref_Center");
    lv_fX = libNtve_gf_ActorLastCreated();
    for (auto91CC0002_i = 1; auto91CC0002_i <= auto91CC0002_n; auto91CC0002_i += 1) {
        libNtve_gf_AttachModelToUnit(lv_u, "InhibitorActivateModel", "Ref_Center");
        Wait(0.04, c_timeGame);
    }
    libNtve_gf_KillModel(lv_fX);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_inhibitor_Init () {
    gt_inhibitor = TriggerCreate("gt_inhibitor_Func");
    TriggerAddEventUnitBehaviorChange(gt_inhibitor, null, "InhibitorArea", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: inhibited_FX
//--------------------------------------------------------------------------------------------------
bool gt_inhibited_FX_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "Superspeed") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);
    UnitBehaviorRemove(lv_u, "Superspeed", 1);
    CameraShakeStart(lv_p, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.7, 4.0, 100.0, 0.1);
    libNtve_gf_AttachModelToUnit(lv_u, "GhostEMPAttackImpactEffect", "Ref_Center");
    SoundPlayOnUnit(SoundLink("Immortal_HardenedShieldImpact", -1), PlayerGroupAll(), lv_u, 0.0, 100.0, 0.0);
    UnitIssueOrder(lv_u, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_inhibited_FX_Init () {
    gt_inhibited_FX = TriggerCreate("gt_inhibited_FX_Func");
    TriggerAddEventUnitBehaviorChange(gt_inhibited_FX, null, "Inhibited", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: solaris_FX_up
//--------------------------------------------------------------------------------------------------
bool gt_solaris_FX_up_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_k;
    unit lv_u;

    // Automatic Variable Declarations
    const int auto4A61DF2D_n = 28;
    int auto4A61DF2D_i;

    // Variable Initialization
    lv_k = 0.2;
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_solaris_alarm(UnitGetOwner(lv_u), UnitGetPosition(lv_u));
    libNtve_gf_AttachModelToUnit(lv_u, "SOAHeroicShieldModel", "Ref_Center");
    SoundPlayAtPointForPlayer(SoundLink("AdunGeneratorPowerUpSound", -1), c_maxPlayers, PlayerGroupAll(), libNtve_gf_PointWithZOffset(UnitGetPosition(EventUnit()), 0.0), 0.0, 100.0, 0.0);
    for (auto4A61DF2D_i = 1; auto4A61DF2D_i <= auto4A61DF2D_n; auto4A61DF2D_i += 1) {
        lv_k *= 1.2;
        libNtve_gf_SendActorMessageToUnit(lv_u, (("AnimSetTimeScale Spin " + FixedToString(lv_k, 1))));
        Wait(0.25, c_timeGame);
    }
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_solaris_FX_up_Init () {
    gt_solaris_FX_up = TriggerCreate("gt_solaris_FX_up_Func");
    TriggerAddEventUnitBehaviorChange(gt_solaris_FX_up, null, "SolarisCHARGE", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: solaris_FX_dn
//--------------------------------------------------------------------------------------------------
bool gt_solaris_FX_dn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_k;
    unit lv_u;

    // Automatic Variable Declarations
    const int autoC6783D60_n = 28;
    int autoC6783D60_i;

    // Variable Initialization
    lv_k = 100.0;
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("Pylon_Containment_Unit_Power_Down", -1), c_maxPlayers, PlayerGroupAll(), libNtve_gf_PointWithZOffset(UnitGetPosition(EventUnit()), 0.0), 0.0, 100.0, 0.0);
    for (autoC6783D60_i = 1; autoC6783D60_i <= autoC6783D60_n; autoC6783D60_i += 1) {
        lv_k /= 1.4;
        if ((FixedToString(lv_k, 1) != "0.0")) {
            libNtve_gf_SendActorMessageToUnit(lv_u, (("AnimSetTimeScale Spin " + FixedToString(lv_k, 1))));
            Wait(0.25, c_timeReal);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_solaris_FX_dn_Init () {
    gt_solaris_FX_dn = TriggerCreate("gt_solaris_FX_dn_Func");
    TriggerAddEventUnitBehaviorChange(gt_solaris_FX_dn, null, "SolarisCHARGE", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: solaris_hits_inhibitor
//--------------------------------------------------------------------------------------------------
bool gt_solaris_hits_inhibitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "WarpPrismPhasing"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "InhibitorArea") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_u = EventUnit();
    UnitBehaviorRemove(lv_u, "InhibitorArea", 1);
    SoundPlayAtPointForPlayer(SoundLink("InhibitorDeactivationSound", -1), c_maxPlayers, PlayerGroupAll(), libNtve_gf_PointWithZOffset(UnitGetPosition(lv_u), 0.0), 0.0, 100.0, 0.0);
    libNtve_gf_CreateModelAtPoint("InhibitorSnipedDeactivationModel", UnitGetPosition(lv_u));
    Wait(7.0, c_timeReal);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_solaris_hits_inhibitor_Init () {
    gt_solaris_hits_inhibitor = TriggerCreate("gt_solaris_hits_inhibitor_Func");
    TriggerAddEventUnitDamaged(gt_solaris_hits_inhibitor, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "SOAPurifierBeamDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: postproduction
//--------------------------------------------------------------------------------------------------
bool gt_postproduction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;

    // Automatic Variable Declarations
    bool auto7FD3D51F_val;
    bool autoB07FB2A1_val;
    string autoEA5E3750_val;

    // Variable Initialization
    lv_p = UnitGetOwner(EventUnitCreatedUnit());
    lv_u = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "DuskWing") || (UnitGetType(EventUnitCreatedUnit()) == "Battlecruiser") || (UnitGetType(EventUnitCreatedUnit()) == "Raven") || (UnitGetType(EventUnitCreatedUnit()) == "Liberator") || (UnitGetType(EventUnitCreatedUnit()) == "VoidSeeker") || (UnitGetType(EventUnitCreatedUnit()) == "WarpPrism") || (UnitGetType(EventUnitCreatedUnit()) == "Oracle") || (UnitGetType(EventUnitCreatedUnit()) == "ArbiterMP") || (UnitGetType(EventUnitCreatedUnit()) == "Disruptor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(lv_u, RandomFixed((UnitGetHeight(lv_u) - 3.0), (UnitGetHeight(lv_u) + 3.0)), 1.0);
    auto7FD3D51F_val = gv_base_is_active[lv_p];
    if (auto7FD3D51F_val == true) {
        autoB07FB2A1_val = gv_rally_flag[lv_p];
        if (autoB07FB2A1_val == true) {
            UnitIssueOrder(lv_u, OrderTargetingPoint(AbilityCommand("attack", 0), gv_rally_location[lv_p]), c_orderQueueReplace);
        }
        else if (autoB07FB2A1_val == false) {
            UnitIssueOrder(lv_u, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
        else {
        }
    }
    else {
    }
    SoundPlayOnUnitForPlayer(SoundLink("ArmoryIntro_DoorOpen", -1), c_maxPlayers, PlayerGroupAll(), lv_u, 0.0, 100.0, 0.0);
    autoEA5E3750_val = UnitGetType(lv_u);
    if (autoEA5E3750_val == "VoidSeeker") {
        UnitSetPropertyFixed(lv_u, c_unitPropLifeMax, 184877.0);
        UnitSetPropertyFixed(lv_u, c_unitPropLife, 184877.0);
    }
    else if (autoEA5E3750_val == "WarpPrism") {
        gf_postproduction_techunits(lv_u);
    }
    else if (autoEA5E3750_val == "Oracle") {
        gf_postproduction_techunits(lv_u);
    }
    else if (autoEA5E3750_val == "ArbiterMP") {
        gf_postproduction_techunits(lv_u);
    }
    else if (autoEA5E3750_val == "Disruptor") {
        gf_postproduction_techunits(lv_u);
        UnitSetHeight(lv_u, RandomFixed(37.0, 38.0), RandomFixed(10.0, 18.0));
        if ((gv_orbital_tip[lv_p] == false)) {
            gv_orbital_tip[lv_p] = true;
            gf_showtip(PlayerGroupSingle(lv_p), 27);
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_postproduction_Init () {
    gt_postproduction = TriggerCreate("gt_postproduction_Func");
    TriggerAddEventUnitCreated(gt_postproduction, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: abilcheck_loop
//--------------------------------------------------------------------------------------------------
bool gt_abilcheck_loop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unitgroup lv_uG;
    text lv_txt;

    // Automatic Variable Declarations
    playergroup auto9DF37672_g;
    int auto9DF37672_var;
    unitgroup auto095C7D51_g;
    int auto095C7D51_u;
    unit auto095C7D51_var;

    // Variable Initialization
    lv_uG = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto9DF37672_g = gv_active_players;
        auto9DF37672_var = -1;
        while (true) {
            auto9DF37672_var = PlayerGroupNextPlayer(auto9DF37672_g, auto9DF37672_var);
            if (auto9DF37672_var < 0) { break; }
            if ((UnitAbilityGetCooldown(gv_base_array[auto9DF37672_var], "MassCloakdrive", "Abil/CloakDriveMass") == 0.0) && (UnitIsAlive(gv_base_array[auto9DF37672_var]) == true) && (gv_masscloak_tip[auto9DF37672_var] == false)) {
                gv_masscloak_tip[auto9DF37672_var] = true;
                HelpPanelAddTip(PlayerGroupSingle(auto9DF37672_var), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/BA27F891"), libNtve_ge_TipType_NormalTip), StringToText(""), StringExternal("Param/Value/8A586320"), "btn-ability-cloakdrive-mass.dds");
                UISetButtonHighlighted(PlayerGroupSingle(auto9DF37672_var), AbilityCommand("MassCloakdrive", 0), false);
            }

            if ((PlayerGetCooldown(auto9DF37672_var, "Abil/BansheeArenaSpecialUnit") == 0.0) && (UnitIsAlive(gv_base_array[auto9DF37672_var]) == true) && (gv_specialunit_tip[auto9DF37672_var] == false)) {
                gv_specialunit_tip[auto9DF37672_var] = true;
                HelpPanelAddTip(PlayerGroupSingle(auto9DF37672_var), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/10E535B8"), libNtve_ge_TipType_NormalTip), StringToText(""), StringExternal("Param/Value/EA02264B"), "Assets\\Textures\\btn-building-terran-techreactor.dds");
                UISetButtonHighlighted(PlayerGroupSingle(auto9DF37672_var), AbilityCommand("HallucinationWarpPrism", 0), false);
            }

            if ((gv_base_is_active[auto9DF37672_var] == true)) {
                lv_uG = UnitGroupEmpty();
                auto095C7D51_g = UnitGroup(null, auto9DF37672_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
                auto095C7D51_u = UnitGroupCount(auto095C7D51_g, c_unitCountAll);
                for (;; auto095C7D51_u -= 1) {
                    auto095C7D51_var = UnitGroupUnitFromEnd(auto095C7D51_g, auto095C7D51_u);
                    if (auto095C7D51_var == null) { break; }
                    if ((UnitGetPropertyFixed(auto095C7D51_var, c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
                        UnitGroupAdd(lv_uG, auto095C7D51_var);
                    }

                }
                gv_guerilla_ready_units[auto9DF37672_var] = lv_uG;
                UnitControlGroupAddUnits(auto9DF37672_var, 2, gv_guerilla_ready_units[auto9DF37672_var]);
                UnitControlGroupAddUnits(auto9DF37672_var, 3, UnitGroup("DuskWing", auto9DF37672_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            }

            Wait(0.5, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_abilcheck_loop_Init () {
    gt_abilcheck_loop = TriggerCreate("gt_abilcheck_loop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawn_loop
//--------------------------------------------------------------------------------------------------
bool gt_spawn_loop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_tmp;

    // Automatic Variable Declarations
    playergroup auto9DB80A82_g;
    int auto9DB80A82_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto9DB80A82_g = gv_active_players;
        auto9DB80A82_var = -1;
        while (true) {
            auto9DB80A82_var = PlayerGroupNextPlayer(auto9DB80A82_g, auto9DB80A82_var);
            if (auto9DB80A82_var < 0) { break; }
            if ((UnitIsAlive(gv_base_array[auto9DB80A82_var]) == true) && (gv_gameover_flag == false)) {
                if ((PlayerGetPropertyInt(auto9DB80A82_var, c_playerPropSuppliesUsed) < 77) && (gv_base_is_active[auto9DB80A82_var] == true)) {
                    lv_tmp = MinI((77 - PlayerGetPropertyInt(auto9DB80A82_var, c_playerPropSuppliesUsed)), 7);
                    UnitCreate(lv_tmp, "DuskWing", c_unitCreateIgnorePlacement, auto9DB80A82_var, UnitGetPosition(gv_base_array[auto9DB80A82_var]), libNtve_gf_RandomAngle());
                    gv_carrier_bounty_increment[auto9DB80A82_var] += gv_player_stats_kill[auto9DB80A82_var];
                }

                gv_carrier_bounty[auto9DB80A82_var] += gv_carrier_bounty_increment[auto9DB80A82_var];
                BoardItemSetText(gv_board, 2, gv_player_board_idx[auto9DB80A82_var], gf_player_kda_text(auto9DB80A82_var));
            }

        }
        Wait(3.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawn_loop_Init () {
    gt_spawn_loop = TriggerCreate("gt_spawn_loop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: tab_press
//--------------------------------------------------------------------------------------------------
bool gt_tab_press_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraForceMouseRelative(lv_p, true);
    CameraSetMouseRotates(lv_p, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tab_press_Init () {
    gt_tab_press = TriggerCreate("gt_tab_press_Func");
    TriggerAddEventKeyPressed(gt_tab_press, c_playerAny, c_keyTab, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tab_exit
//--------------------------------------------------------------------------------------------------
bool gt_tab_exit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    CameraForceMouseRelative(lv_p, false);
    CameraSetMouseRotates(lv_p, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tab_exit_Init () {
    gt_tab_exit = TriggerCreate("gt_tab_exit_Func");
    TriggerAddEventKeyPressed(gt_tab_exit, c_playerAny, c_keyTab, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: zoom_compensate
//--------------------------------------------------------------------------------------------------
bool gt_zoom_compensate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto7B3F8BA8_n = 7;
    int auto7B3F8BA8_i;

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto7B3F8BA8_i = 1; auto7B3F8BA8_i <= auto7B3F8BA8_n; auto7B3F8BA8_i += 1) {
        Wait(0.25, c_timeGame);
        SoundChannelSetVolume(PlayerGroupSingle(EventPlayer()), c_soundCategoryCombat, MaxF((100.0 - (CameraGetDistance(EventPlayer()) * 2.0)), 0.0), 0.5);
        SoundChannelSetVolume(PlayerGroupSingle(EventPlayer()), c_soundCategoryMovie, MaxF((100.0 - (CameraGetDistance(EventPlayer()) * 1.0)), 0.0), 0.5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zoom_compensate_Init () {
    gt_zoom_compensate = TriggerCreate("gt_zoom_compensate_Func");
    TriggerAddEventMouseWheel(gt_zoom_compensate, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: purge_type
//--------------------------------------------------------------------------------------------------
bool gt_purge_type_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto74F2EA9E_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto74F2EA9E_val = gv_purge_type;
    if (auto74F2EA9E_val == 1) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/340639F7")));
    }
    else if (auto74F2EA9E_val == 2) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/C74E8809")));
    }
    else if (auto74F2EA9E_val == 3) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/68BE97E9")));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_purge_type_Init () {
    gt_purge_type = TriggerCreate("gt_purge_type_Func");
    TriggerAddEventChatMessage(gt_purge_type, c_playerAny, "purge_type", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: hide_ui 1
//--------------------------------------------------------------------------------------------------
bool gt_hide_ui1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_base_is_active[EventPlayer()] == true))) {
            return false;
        }

        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetMode(PlayerGroupSingle(EventPlayer()), c_uiModeFullscreen, c_transitionDurationImmediate);
    DialogSetVisible(gv_bar_box, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_map_box, PlayerGroupSingle(EventPlayer()), false);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeErrorDisplayPanel, false);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeObjectivePanel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hide_ui1_Init () {
    gt_hide_ui1 = TriggerCreate("gt_hide_ui1_Func");
    TriggerAddEventChatMessage(gt_hide_ui1, c_playerAny, "movie 1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: hide_ui 0
//--------------------------------------------------------------------------------------------------
bool gt_hide_ui0_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_base_is_active[EventPlayer()] == true))) {
            return false;
        }

        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetMode(PlayerGroupSingle(EventPlayer()), c_uiModeConsole, c_transitionDurationImmediate);
    DialogSetVisible(gv_bar_box, PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_map_box, PlayerGroupSingle(EventPlayer()), true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeTipAlertPanel, true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeSupply, true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeAlertPanel, true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeErrorDisplayPanel, true);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeObjectivePanel, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hide_ui0_Init () {
    gt_hide_ui0 = TriggerCreate("gt_hide_ui0_Func");
    TriggerAddEventChatMessage(gt_hide_ui0, c_playerAny, "movie 0", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: bholetest
//--------------------------------------------------------------------------------------------------
bool gt_bholetest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto57514F03_n = 10;
    int auto57514F03_i;

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto57514F03_i = 1; auto57514F03_i <= auto57514F03_n; auto57514F03_i += 1) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, RegionRandomPoint(gv_blackhole_map));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_bholetest_Init () {
    gt_bholetest = TriggerCreate("gt_bholetest_Func");
    TriggerAddEventChatMessage(gt_bholetest, c_playerAny, "bhole", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: empty
//--------------------------------------------------------------------------------------------------
bool gt_empty_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitFromId(5));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_empty_Init () {
    gt_empty = TriggerCreate("gt_empty_Func");
    TriggerAddEventChatMessage(gt_empty, c_playerAny, "empty", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: get_time
//--------------------------------------------------------------------------------------------------
bool gt_get_time_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, FixedToText(TimerGetElapsed(gv_purge_timer), 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_get_time_Init () {
    gt_get_time = TriggerCreate("gt_get_time_Func");
    TriggerAddEventChatMessage(gt_get_time, c_playerAny, "get_time", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: activate_simulator
//--------------------------------------------------------------------------------------------------
bool gt_activate_simulator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_fX;

    // Automatic Variable Declarations
    const int auto9A8D5DEC_ae = 2;
    int auto9A8D5DEC_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9A8D5DEC_var = 1;
    for ( ; auto9A8D5DEC_var <= auto9A8D5DEC_ae; auto9A8D5DEC_var += 1 ) {
        gv_aI_controller[auto9A8D5DEC_var] = true;
        libNtve_gf_SetAllianceOneWay(auto9A8D5DEC_var, 1, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/78B772CD")));
    SoundPlay(SoundLink("UI_Bnet_PopUp_Generic", 2), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_activate_simulator_Init () {
    gt_activate_simulator = TriggerCreate("gt_activate_simulator_Func");
    TriggerAddEventChatMessage(gt_activate_simulator, c_playerAny, "activate_simulator", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI_core_loop
//--------------------------------------------------------------------------------------------------
bool gt_AI_core_loop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto621E47A1_g;
    int auto621E47A1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto621E47A1_g = gv_active_players;
        auto621E47A1_var = -1;
        while (true) {
            auto621E47A1_var = PlayerGroupNextPlayer(auto621E47A1_g, auto621E47A1_var);
            if (auto621E47A1_var < 0) { break; }
            if ((gv_aI_controller[auto621E47A1_var] == true) && (gv_base_is_active[auto621E47A1_var] == true)) {
                gf_AI_attempt_upgrade(auto621E47A1_var);
                gf_AI_build_units(auto621E47A1_var);
                gf_AI_update_poi(auto621E47A1_var, false);
                gf_AI_attempt_guerilla(auto621E47A1_var, gv_aI_attack_poi[auto621E47A1_var][RandomInt(1, gv_aI_max_pois)], false);
                gf_AI_command_units(auto621E47A1_var);
                gf_AI_attempt_attack_rally(auto621E47A1_var, RandomInt(1, gv_aI_max_pois));
                gf_AI_attempt_massattack(auto621E47A1_var);
                gf_AI_evade_proactive(auto621E47A1_var);
            }

            Wait(1.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AI_core_loop_Init () {
    gt_AI_core_loop = TriggerCreate("gt_AI_core_loop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI_anti_AoE
//--------------------------------------------------------------------------------------------------
bool gt_AI_anti_AoE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unitgroup lv_uG;
    point lv_location;

    // Automatic Variable Declarations
    abilcmd auto14D73524_val;
    unitgroup autoDE2A2B51_g;
    int autoDE2A2B51_u;
    unit autoDE2A2B51_var;
    const int auto4BA8FB9E_n = 10;
    int auto4BA8FB9E_i;
    unitgroup autoE73AAD21_g;
    int autoE73AAD21_u;
    unit autoE73AAD21_var;

    // Variable Initialization
    lv_u = EventUnit();
    lv_uG = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_location = UnitGetPosition(lv_u);
    Wait(RandomFixed(1.0, 2.0), c_timeGame);
    auto14D73524_val = EventUnitAbility();
    if (auto14D73524_val == AbilityCommand("GuardianShield", 0)) {
        while (true) {
            lv_uG = UnitGroup(null, c_playerAny, RegionCircle(lv_location, 14.7), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 7);
            autoDE2A2B51_g = lv_uG;
            autoDE2A2B51_u = UnitGroupCount(autoDE2A2B51_g, c_unitCountAll);
            for (;; autoDE2A2B51_u -= 1) {
                autoDE2A2B51_var = UnitGroupUnitFromEnd(autoDE2A2B51_g, autoDE2A2B51_u);
                if (autoDE2A2B51_var == null) { break; }
                if ((UnitIsAlive(autoDE2A2B51_var) == true) && (gv_aI_controller[UnitGetOwner(autoDE2A2B51_var)] == true)) {
                    gf_AI_attempt_singlemove(autoDE2A2B51_var, gv_aI_safe_poi[UnitGetOwner(autoDE2A2B51_var)][1], true, false);
                    gf_AI_request_rescue(autoDE2A2B51_var);
                }

            }
            Wait(RandomFixed(1.0, 2.0), c_timeGame);
        }
    }
    else if (auto14D73524_val == AbilityCommand("ArtanisPsionicShockwave", 0)) {
        for (auto4BA8FB9E_i = 1; auto4BA8FB9E_i <= auto4BA8FB9E_n; auto4BA8FB9E_i += 1) {
            lv_uG = UnitGroup(null, c_playerAny, RegionCircle(lv_location, 9.8), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 7);
            autoE73AAD21_g = lv_uG;
            autoE73AAD21_u = UnitGroupCount(autoE73AAD21_g, c_unitCountAll);
            for (;; autoE73AAD21_u -= 1) {
                autoE73AAD21_var = UnitGroupUnitFromEnd(autoE73AAD21_g, autoE73AAD21_u);
                if (autoE73AAD21_var == null) { break; }
                if ((UnitIsAlive(autoE73AAD21_var) == true) && (gv_aI_controller[UnitGetOwner(autoE73AAD21_var)] == true)) {
                    gf_AI_attempt_singlemove(autoE73AAD21_var, gv_aI_safe_poi[UnitGetOwner(autoE73AAD21_var)][1], true, false);
                    gf_AI_request_rescue(autoE73AAD21_var);
                }

            }
            Wait(RandomFixed(1.0, 2.0), c_timeGame);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AI_anti_AoE_Init () {
    gt_AI_anti_AoE = TriggerCreate("gt_AI_anti_AoE_Func");
    TriggerAddEventUnitAbility(gt_AI_anti_AoE, null, AbilityCommand("GuardianShield", 0), c_abilEffectStagePrep, true);
    TriggerAddEventUnitAbility(gt_AI_anti_AoE, null, AbilityCommand("ArtanisPsionicShockwave", 0), c_unitAbilStageExecute, true);
    TriggerAddEventUnitAbility(gt_AI_anti_AoE, null, AbilityCommand("PhasingMode", 0), c_unitAbilStageExecute, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI_tech_unit_timeout
//--------------------------------------------------------------------------------------------------
bool gt_AI_tech_unit_timeout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    abilcmd autoA6AF539F_val;

    // Variable Initialization
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!((gv_aI_controller[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomFixed(28.0, 35.0), c_timeGame);
    autoA6AF539F_val = EventUnitAbility();
    if (autoA6AF539F_val == AbilityCommand("ArbiterMPRecall", 0)) {
        gf_AI_singleunit_order(lv_u, Order(AbilityCommand("TaurenStimpack", 0)), 1, false);
    }
    else if (autoA6AF539F_val == AbilityCommand("PhasingMode", 0)) {
        gf_AI_singleunit_order(lv_u, Order(AbilityCommand("TransportMode", 0)), 1, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AI_tech_unit_timeout_Init () {
    gt_AI_tech_unit_timeout = TriggerCreate("gt_AI_tech_unit_timeout_Func");
    TriggerAddEventUnitAbility(gt_AI_tech_unit_timeout, null, AbilityCommand("ArbiterMPRecall", 0), c_unitAbilStageExecute, true);
    TriggerAddEventUnitAbility(gt_AI_tech_unit_timeout, null, AbilityCommand("PhasingMode", 0), c_unitAbilStageExecute, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI_evade_reactive
//--------------------------------------------------------------------------------------------------
bool gt_AI_evade_reactive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_aI_evade;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GhostAcademy"))) {
            return false;
        }

        if (!((gv_aI_controller[lv_p] == true))) {
            return false;
        }

        if (!((gv_base_is_active[lv_p] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_aI_evade = RandomInt(1, FixedToInt(UnitGetPropertyFixed(gv_base_array[lv_p], c_unitPropLife, c_unitPropCurrent)));
    if ((lv_aI_evade <= 777)) {
        gf_AI_attempt_singlemove(gv_base_array[lv_p], gv_aI_safe_poi[lv_p][1], true, true);
        gf_AI_request_rescue(gv_base_array[lv_p]);
    }
    else {
        gf_AI_singleunit_order(gv_base_array[lv_p], Order(AbilityCommand("StarportTrain", 7)), 1, true);
        gf_AI_singleunit_order(gv_base_array[lv_p], Order(AbilityCommand("StarportTrain", 6)), 1, true);
        gf_AI_singleunit_order(gv_base_array[lv_p], Order(AbilityCommand("StarportTrain", 2)), 1, true);
        gf_AI_singleunit_order(gv_base_array[lv_p], Order(AbilityCommand("StarportTrain", 1)), 1, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AI_evade_reactive_Init () {
    gt_AI_evade_reactive = TriggerCreate("gt_AI_evade_reactive_Func");
    TriggerEnable(gt_AI_evade_reactive, false);
    TriggerAddEventUnitAttacked2(gt_AI_evade_reactive, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: exit
//--------------------------------------------------------------------------------------------------
bool gt_exit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto4E8479C3_g;
    int auto4E8479C3_var;

    // Variable Initialization
    lv_p = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_gameover_flag == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_btn_start, PlayerGroupAll(), true);
    gv_exit_flag[lv_p] = true;
    auto4E8479C3_g = gv_active_players;
    auto4E8479C3_var = -1;
    while (true) {
        auto4E8479C3_var = PlayerGroupNextPlayer(auto4E8479C3_g, auto4E8479C3_var);
        if (auto4E8479C3_var < 0) { break; }
        libNtve_gf_SetAllianceOneWay(lv_p, auto4E8479C3_var, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    }
    BoardItemSetText(gv_board, 1, gv_player_board_idx[lv_p], (StringExternal("Param/Value/15EC1D77") + IntToText(lv_p) + StringExternal("Param/Value/803AF2B4")));
    BoardItemSetText(gv_board, 2, gv_player_board_idx[lv_p], (StringExternal("Param/Value/81F1187D")));
    PlayerGroupRemove(gv_active_players, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_exit_Init () {
    gt_exit = TriggerCreate("gt_exit_Func");
    TriggerAddEventPlayerLeft(gt_exit, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: leaderboard
//--------------------------------------------------------------------------------------------------
bool gt_leaderboard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_idx;

    // Automatic Variable Declarations
    playergroup autoDB9166A2_g;
    playergroup autoE88CD8A1_g;
    playergroup auto74EC0957_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(2, 9, StringToText(""), Color(100.00, 100.00, 100.00));
    BoardSetAnchor(BoardLastCreated(), c_anchorTopRight, 30, -10);
    BoardSetState(BoardLastCreated(), PlayerGroupAll(), c_boardStateShowTitle, false);
    BoardSetState(BoardLastCreated(), PlayerGroupAll(), c_boardStateShowHeader, false);
    BoardItemSetText(BoardLastCreated(), 1, 1, StringExternal("Param/Value/D1ADFEDB"));
    BoardItemSetText(BoardLastCreated(), 1, 2, StringExternal("Param/Value/1735D4CC"));
    BoardItemSetText(BoardLastCreated(), 2, 2, StringExternal("Param/Value/1C2B9B06"));
    BoardSetColumnWidth(BoardLastCreated(), 1, 5.0);
    BoardSetColumnWidth(BoardLastCreated(), 2, 9.0);
    lv_idx = 3;
    autoDB9166A2_g = gv_active_players;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(autoDB9166A2_g, lv_i);
        if (lv_i < 0) { break; }
        gv_player_board_idx[lv_i] = lv_idx;
        lv_idx += 1;
    }
    autoE88CD8A1_g = gv_active_players;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(autoE88CD8A1_g, lv_i);
        if (lv_i < 0) { break; }
        BoardItemSetText(BoardLastCreated(), 1, gv_player_board_idx[lv_i], (StringExternal("Param/Value/99B9013D") + TextWithColor(StringExternal("Param/Value/499FE64E"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/69CB8E4C") + IntToText(lv_i) + StringExternal("Param/Value/E6F72CE3") + TextWithColor(StringExternal("Param/Value/D665FB1B"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false)))));
        BoardItemSetAlignment(BoardLastCreated(), 2, gv_player_board_idx[lv_i], c_alignCenter);
        BoardItemSetText(BoardLastCreated(), 2, gv_player_board_idx[lv_i], gf_player_kda_text(lv_i));
    }
    BoardShowAll(false, PlayerGroupAll());
    gv_board = BoardLastCreated();
    auto74EC0957_g = gv_active_players;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(auto74EC0957_g, lv_i);
        if (lv_i < 0) { break; }
        gv_player_tags[lv_i] = TextWithColor(PlayerName(lv_i), Color(100.0, 100.0, 100.0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_leaderboard_Init () {
    gt_leaderboard = TriggerCreate("gt_leaderboard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: unit_destroyed
//--------------------------------------------------------------------------------------------------
bool gt_unit_destroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_camera_force;
    int lv_ratio_increment;
    bool lv_is_big;
    int lv_p;
    unit lv_pU;
    int lv_a;
    unit lv_aU;
    unit lv_u;
    point lv_pL;

    // Automatic Variable Declarations
    string auto0152EE8E_val;
    bool auto453E1304_val;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_pU = EventUnit();
    lv_a = EventUnitDamageSourcePlayer();
    lv_aU = EventUnitDamageSourceUnit();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "DuskWing") || (UnitGetType(EventUnit()) == "Battlecruiser") || (UnitGetType(EventUnit()) == "Raven") || (UnitGetType(EventUnit()) == "Liberator") || (UnitGetType(EventUnit()) == "LiberatorAG") || (UnitGetType(EventUnit()) == "VoidSeeker") || (UnitGetType(EventUnit()) == "GhostAcademy")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pL = UnitGetPosition(lv_pU);
    auto0152EE8E_val = UnitGetType(lv_pU);
    if (auto0152EE8E_val == "DuskWing") {
        lv_camera_force = 0.1;
        lv_ratio_increment = gv_banshee_worth[lv_p];
    }
    else if (auto0152EE8E_val == "Battlecruiser") {
        lv_camera_force = 0.2;
        lv_ratio_increment = gv_const_tierunit_worth[2];
    }
    else if (auto0152EE8E_val == "Raven") {
        lv_camera_force = 0.3;
        lv_ratio_increment = gv_const_tierunit_worth[3];
    }
    else if (auto0152EE8E_val == "Liberator") {
        lv_camera_force = 0.4;
        lv_ratio_increment = gv_const_tierunit_worth[4];
    }
    else if (auto0152EE8E_val == "LiberatorAG") {
        lv_camera_force = 0.4;
        lv_ratio_increment = gv_const_tierunit_worth[4];
    }
    else if (auto0152EE8E_val == "VoidSeeker") {
        lv_camera_force = 0.5;
        lv_ratio_increment = gv_const_tierunit_worth[5];
    }
    else if (auto0152EE8E_val == "GhostAcademy") {
        lv_camera_force = 0.6;
        lv_ratio_increment = gv_carrier_bounty[lv_p];
        gv_carrier_bounty[lv_p] = 0;
        gv_carrier_bounty_increment[lv_p] = 1;
        lv_is_big = true;
    }
    else {
    }
    if ((lv_a != 16) && (lv_p != lv_a)) {
        CameraShakeStart(lv_a, c_cameraPositionTarget, c_cameraDirectionXYZ, lv_camera_force, 4.0, 100.0, 0.1);
        PlayerModifyPropertyInt(lv_a, c_playerPropMinerals, c_playerPropOperAdd, (lv_ratio_increment * gv_const_income_multiplier));
        UIDisplayMessage(PlayerGroupSingle(lv_a), c_messageAreaError, (StringExternal("Param/Value/77D6C8D1") + IntToText((lv_ratio_increment * gv_const_income_multiplier))));
    }

    if ((lv_is_big == true) && (gv_gameover_flag == false)) {
        gf_player_score_update(lv_a, lv_p, (lv_ratio_increment * gv_const_income_multiplier));
        gv_base_is_active[lv_p] = false;
        auto453E1304_val = gv_exit_flag[lv_p];
        if (auto453E1304_val == false) {
            gf_respawn_carrier(lv_p, lv_pL, true);
        }
        else {
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_unit_destroyed_Init () {
    gt_unit_destroyed = TriggerCreate("gt_unit_destroyed_Func");
    TriggerAddEventUnitDamaged(gt_unit_destroyed, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: bgm_sequence_maingame
//--------------------------------------------------------------------------------------------------
bool gt_bgm_sequence_maingame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loop;
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto80604627_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_purge_timer, 1209.0, false, c_timeReal);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 25.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 40.0, 20.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "BansheeOST0", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerExecute(gt_purge_sequence, true, false);
    libNtve_gf_WaitForTimer(gv_purge_timer, 10.5, true);
    SoundPlayForPlayer(SoundLink("Battlecruiser_YamatoAttackChargeUp", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_WaitForTimer(gv_purge_timer, 12.5, true);
    SoundPlayForPlayer(SoundLink("Raynor_MorosDeviceStart", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_WaitForTimer(gv_purge_timer, 16.35, true);
    TriggerExecute(gt_ui_refresh_maingame_timer_loop, true, false);
    libNtve_gf_WaitForTimer(gv_purge_timer, 312.0, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libNtve_gf_WaitForTimer(gv_purge_timer, 317.0, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "BansheeOST1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 40.0, 20.0);
    libNtve_gf_WaitForTimer(gv_purge_timer, 346.4, true);
    SoundPlayForPlayer(SoundLink("PsiDecimator_PreExplosion_PowerFlux", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto80604627_g = PlayerGroupAll();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto80604627_g, lv_p);
        if (lv_p < 0) { break; }
        CameraShakeStart(lv_p, c_cameraPositionTarget, c_cameraDirectionZ, 0.7, 4.0, 100.0, 0.1);
    }
    GameSetSpeedLocked(false);
    GameSetSpeedValue(c_gameSpeedFast);
    GameSetSpeedLocked(true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/66DB00E7"));
    libNtve_gf_WaitForTimer(gv_purge_timer, 577.0, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libNtve_gf_WaitForTimer(gv_purge_timer, 579.0, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "BansheeOST2", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 40.0, 20.0);
    libNtve_gf_WaitForTimer(gv_purge_timer, 857.0, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libNtve_gf_WaitForTimer(gv_purge_timer, 860.0, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "BansheeOST3", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 40.0, 20.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_bgm_sequence_maingame_Init () {
    gt_bgm_sequence_maingame = TriggerCreate("gt_bgm_sequence_maingame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: bgm_sequence_tutorial
//--------------------------------------------------------------------------------------------------
bool gt_bgm_sequence_tutorial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loop;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(gv_purge_timer, 1209.0, false, c_timeReal);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 25.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 80.0, 10.0);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "BansheeOSTT1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_WaitForTimer(gv_purge_timer, 15.5, true);
    SoundPlay(SoundLink("Battlecruiser_YamatoAttackChargeUp", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_WaitForTimer(gv_purge_timer, 17.5, true);
    SoundPlay(SoundLink("Raynor_MorosDeviceStart", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_WaitForTimer(gv_purge_timer, 25.0, true);
    SoundStop(SoundLastPlayed(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_bgm_sequence_tutorial_Init () {
    gt_bgm_sequence_tutorial = TriggerCreate("gt_bgm_sequence_tutorial_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: purge_sequence
//--------------------------------------------------------------------------------------------------
bool gt_purge_sequence_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_gROUP;
    int lv_i;
    sound lv_fX;
    fixed lv_k;

    // Automatic Variable Declarations
    int auto940455E5_val;
    unitgroup auto338722FB_g;
    int auto338722FB_u;
    unit auto338722FB_var;
    const int autoE1FFCCF0_n = 45;
    int autoE1FFCCF0_i;
    unitgroup auto15A06F4F_g;
    int auto15A06F4F_u;
    unit auto15A06F4F_var;
    unitgroup autoAB9B69E1_g;
    int autoAB9B69E1_u;
    unit autoAB9B69E1_var;
    const int autoA433CE7C_n = 45;
    int autoA433CE7C_i;
    playergroup autoB3E95FE7_g;
    int autoB3E95FE7_var;
    const int autoF415162F_n = 45;
    int autoF415162F_i;
    const int autoE95A5317_ae = gv_const_maxdisc;
    const int autoE95A5317_ai = 1;
    const int auto21329556_ae = gv_const_maxdisc;
    const int auto21329556_ai = 1;
    int auto7C4D20E7_val;
    unitgroup auto692C0077_g;
    int auto692C0077_u;
    unit auto692C0077_var;
    playergroup auto2B92F144_g;
    int auto2B92F144_var;

    // Variable Initialization
    lv_gROUP = UnitGroupEmpty();
    lv_k = 0.2;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_WaitForTimer(gv_purge_timer, 300.0, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/58BD799A"));
    SoundPlay(SoundLink("UI_ChatMessageReceived", 0), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_WaitForTimer(gv_purge_timer, 920.0, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/30507B2A"));
    SoundPlay(SoundLink("UI_ChatMessageReceived", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(14.0, c_timeReal);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/740A4491"));
    SoundPlay(SoundLink("UI_Bnet_PopUp_Generic", 1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_WaitForTimer(gv_purge_timer, 1081.6, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D9935B62"));
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", 0), PlayerGroupAll(), 100.0, 0.0);
    GameSetLighting("PortZion", 7.0);
    MinimapPing(PlayerGroupAll(), PointFromId(36), 70.0, Color(0.00, 100.00, 75.29));
    TriggerExecute(gt_purge_endgame_countdown, true, false);
    auto940455E5_val = gv_purge_type;
    if (auto940455E5_val == 1) {
        auto338722FB_g = UnitGroup("RipFieldGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto338722FB_u = UnitGroupCount(auto338722FB_g, c_unitCountAll);
        for (;; auto338722FB_u -= 1) {
            auto338722FB_var = UnitGroupUnitFromEnd(auto338722FB_g, auto338722FB_u);
            if (auto338722FB_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto338722FB_var, (("AnimSetTimeScale Spin " + FixedToString(lv_k, 1))));
            UnitSetHeight(auto338722FB_var, -0.5, 15.0);
        }
        SoundPlay(SoundLink("TTychus05Adjutant00011", -1), PlayerGroupAll(), 100.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        Wait(1.0, c_timeReal);
        SoundPlay(SoundLink("THorner05SRaynor00018", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_WaitForTimer(gv_purge_timer, 1140.8, true);
        SoundPlay(SoundLink("ArmoryDropShip_Work", 0), PlayerGroupAll(), 70.0, 0.0);
        for (autoE1FFCCF0_i = 1; autoE1FFCCF0_i <= autoE1FFCCF0_n; autoE1FFCCF0_i += 1) {
            lv_k *= 1.2;
            auto15A06F4F_g = UnitGroup("RipFieldGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto15A06F4F_u = UnitGroupCount(auto15A06F4F_g, c_unitCountAll);
            for (;; auto15A06F4F_u -= 1) {
                auto15A06F4F_var = UnitGroupUnitFromEnd(auto15A06F4F_g, auto15A06F4F_u);
                if (auto15A06F4F_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(auto15A06F4F_var, (("AnimSetTimeScale Spin " + FixedToString(lv_k, 1))));
            }
            Wait(0.25, c_timeReal);
        }
        libNtve_gf_WaitForTimer(gv_purge_timer, 1153.9, true);
        autoAB9B69E1_g = UnitGroup("RipFieldGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoAB9B69E1_u = UnitGroupCount(autoAB9B69E1_g, c_unitCountAll);
        for (;; autoAB9B69E1_u -= 1) {
            autoAB9B69E1_var = UnitGroupUnitFromEnd(autoAB9B69E1_g, autoAB9B69E1_u);
            if (autoAB9B69E1_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoAB9B69E1_var, (("AnimSetTimeScale Spin " + FixedToString(lv_k, 1))));
        }
        SoundStop(SoundLastPlayed(), true);
        libNtve_gf_ShowHideUnit(UnitFromId(37), true);
        SoundPlayOnUnit(SoundLink("Mothership_AttackLaunch", 0), PlayerGroupAll(), UnitFromId(37), 0.0, 100.0, 0.0);
        SoundPlayOnUnit(SoundLink("Mothership_VortexLoop", 0), PlayerGroupAll(), UnitFromId(37), 0.0, 100.0, 0.0);
    }
    else if (auto940455E5_val == 2) {
        libNtve_gf_ShowHideUnit(UnitFromId(86), true);
        UnitSetHeight(UnitFromId(86), -0.5, 15.0);
        SoundPlay(SoundLink("TTychus05Adjutant00011", -1), PlayerGroupAll(), 100.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        Wait(1.0, c_timeReal);
        SoundPlay(SoundLink("THorner05SRaynor00018", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_WaitForTimer(gv_purge_timer, 1140.8, true);
        SoundPlay(SoundLink("Umojan_Lab02Tram_speedup", 0), PlayerGroupAll(), 70.0, 0.0);
        for (autoA433CE7C_i = 1; autoA433CE7C_i <= autoA433CE7C_n; autoA433CE7C_i += 1) {
            lv_k *= 1.2;
            libNtve_gf_SendActorMessageToUnit(UnitFromId(86), (("AnimSetTimeScale Spin " + FixedToString(lv_k, 1))));
            Wait(0.25, c_timeReal);
        }
        libNtve_gf_WaitForTimer(gv_purge_timer, 1153.9, true);
        lv_k *= 2.0;
        libNtve_gf_SendActorMessageToUnit(UnitFromId(86), (("AnimSetTimeScale Spin " + FixedToString(lv_k, 1))));
        SoundStop(SoundLastPlayed(), true);
        libNtve_gf_ShowHideUnit(UnitFromId(11), true);
        SoundPlayOnUnit(SoundLink("Core_SpinUp", 0), PlayerGroupAll(), UnitFromId(11), 0.0, 700.0, 0.0);
        SoundPlayOnUnit(SoundLink("Core_TransformEndHit", 0), PlayerGroupAll(), UnitFromId(11), 0.0, 700.0, 0.0);
        SoundPlayOnUnit(SoundLink("Mothership_VortexLoop", 0), PlayerGroupAll(), UnitFromId(11), 0.0, 100.0, 0.0);
        autoB3E95FE7_g = PlayerGroupActive();
        autoB3E95FE7_var = -1;
        while (true) {
            autoB3E95FE7_var = PlayerGroupNextPlayer(autoB3E95FE7_g, autoB3E95FE7_var);
            if (autoB3E95FE7_var < 0) { break; }
            CameraSetValue(autoB3E95FE7_var, c_cameraValueFieldOfView, 85.0, 70.0, -1, 100.0);
        }
    }
    else if (auto940455E5_val == 3) {
        libNtve_gf_ShowHideUnit(UnitFromId(463829644), true);
        UnitSetHeight(UnitFromId(463829644), 0.0, 15.0);
        SoundPlay(SoundLink("TTychus05Adjutant00011", -1), PlayerGroupAll(), 100.0, 0.0);
        SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
        Wait(1.0, c_timeReal);
        SoundPlay(SoundLink("THorner05SRaynor00018", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_WaitForTimer(gv_purge_timer, 1140.8, true);
        SoundPlay(SoundLink("Event_Aiur03_Victory_SoA_RollOut", 0), PlayerGroupAll(), 100.0, 0.0);
        for (autoF415162F_i = 1; autoF415162F_i <= autoF415162F_n; autoF415162F_i += 1) {
            lv_k *= 1.2;
            libNtve_gf_SendActorMessageToUnit(UnitFromId(463829644), (("AnimSetTimeScale Spin " + FixedToString(lv_k, 1))));
            Wait(0.25, c_timeReal);
        }
        libNtve_gf_WaitForTimer(gv_purge_timer, 1153.9, true);
        lv_k *= 2.0;
        libNtve_gf_SendActorMessageToUnit(UnitFromId(463829644), (("AnimSetTimeScale Spin " + FixedToString(lv_k, 1))));
        libNtve_gf_ShowHideUnit(UnitFromId(261959662), true);
        libNtve_gf_SendActorMessageToUnit(UnitFromId(261959662), ("SetScale 10.000000 70.000000"));
        SoundPlay(SoundLink("Event_Aiur03_Victory_BlastOff_QUAD", 0), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/65510783"));
    MinimapPing(PlayerGroupAll(), PointFromId(36), 70.0, Color(0.00, 100.00, 75.29));
    lv_i = 1;
    for ( ; ( (autoE95A5317_ai >= 0 && lv_i <= autoE95A5317_ae) || (autoE95A5317_ai < 0 && lv_i >= autoE95A5317_ae) ) ; lv_i += autoE95A5317_ai ) {
        CameraShakeStart(lv_i, c_cameraPositionTarget, c_cameraDirectionZ, 0.7, 4.0, 100.0, 0.25);
    }
    libNtve_gf_WaitForTimer(gv_purge_timer, 1206.9, true);
    lv_i = 1;
    for ( ; ( (auto21329556_ai >= 0 && lv_i <= auto21329556_ae) || (auto21329556_ai < 0 && lv_i >= auto21329556_ae) ) ; lv_i += auto21329556_ai ) {
        gv_timer_break_flag[lv_i] = true;
    }
    auto7C4D20E7_val = gv_purge_type;
    if (auto7C4D20E7_val == 1) {
        libNtve_gf_ShowHideUnit(UnitFromId(37), false);
        SoundStop(SoundLastPlayed(), false);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, true);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovie, true);
        SoundPlayOnUnit(SoundLink("PurifierClick", 0), PlayerGroupAll(), UnitFromId(37), 0.0, 100.0, 0.0);
        auto692C0077_g = UnitGroup("RipFieldGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto692C0077_u = UnitGroupCount(auto692C0077_g, c_unitCountAll);
        for (;; auto692C0077_u -= 1) {
            auto692C0077_var = UnitGroupUnitFromEnd(auto692C0077_g, auto692C0077_u);
            if (auto692C0077_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto692C0077_var, (("AnimSetTimeScale Spin " + FixedToString(0.01, 2))));
        }
    }
    else if (auto7C4D20E7_val == 2) {
        libNtve_gf_ShowHideUnit(UnitFromId(11), false);
        SoundStop(SoundLastPlayed(), false);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, true);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovie, true);
        SoundPlayOnUnit(SoundLink("Core_SpinUp", 0), PlayerGroupAll(), UnitFromId(11), 0.0, 100.0, 0.0);
        libNtve_gf_SendActorMessageToUnit(UnitFromId(86), (("AnimSetTimeScale Spin " + FixedToString(0.01, 2))));
        auto2B92F144_g = PlayerGroupActive();
        auto2B92F144_var = -1;
        while (true) {
            auto2B92F144_var = PlayerGroupNextPlayer(auto2B92F144_g, auto2B92F144_var);
            if (auto2B92F144_var < 0) { break; }
            CameraSetValue(auto2B92F144_var, c_cameraValueFieldOfView, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueFieldOfView), 0.05, -1, 100.0);
        }
    }
    else if (auto7C4D20E7_val == 3) {
        UnitKill(UnitFromId(463829644));
        SoundPlay(SoundLink("Event_Aiur03_Victory_Energy_Swirl_LR", 0), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_purge_sequence_Init () {
    gt_purge_sequence = TriggerCreate("gt_purge_sequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: purge_endgame_countdown
//--------------------------------------------------------------------------------------------------
bool gt_purge_endgame_countdown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[8] lv_timepoint_array;

    // Automatic Variable Declarations
    const int auto409DD7F5_ae = 7;
    int auto409DD7F5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timepoint_array[1] = 30;
    lv_timepoint_array[2] = 10;
    lv_timepoint_array[3] = 5;
    lv_timepoint_array[4] = 4;
    lv_timepoint_array[5] = 3;
    lv_timepoint_array[6] = 2;
    lv_timepoint_array[7] = 1;
    libNtve_gf_WaitForTimer(gv_purge_timer, 60.0, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2C7E20CB"));
    SoundPlay(SoundLink("UI_ReplayDropdownListSelect", 0), PlayerGroupAll(), 100.0, 0.0);
    auto409DD7F5_var = 1;
    for ( ; auto409DD7F5_var <= auto409DD7F5_ae; auto409DD7F5_var += 1 ) {
        libNtve_gf_WaitForTimer(gv_purge_timer, lv_timepoint_array[auto409DD7F5_var], false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/BE22AA8A") + FixedToText(lv_timepoint_array[auto409DD7F5_var], 0) + StringExternal("Param/Value/D7B40C35")));
        SoundPlay(SoundLink("UI_ReplayDropdownListSelect", 0), PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_purge_endgame_countdown_Init () {
    gt_purge_endgame_countdown = TriggerCreate("gt_purge_endgame_countdown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: purge_activate
//--------------------------------------------------------------------------------------------------
bool gt_purge_activate_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unit lv_u;
    int lv_i;
    int lv_ii;
    text lv_txt;
    int[gv_const_maxdisc + 1] lv_sort;
    int lv_winner;
    text lv_txt_th;

    // Automatic Variable Declarations
    const int auto6EE820DD_ae = gv_const_maxdisc;
    const int auto6EE820DD_ai = 1;
    const int auto57791844_ae = gv_const_maxdisc;
    const int auto57791844_ai = 1;
    unitgroup auto0606502F_g;
    int auto0606502F_u;
    const int auto5AB890F3_ae = 1;
    const int auto5AB890F3_ai = -1;
    const int auto8B6EACCD_ae = gv_const_maxdisc;
    const int auto8B6EACCD_ai = 1;
    int auto4F16991B_val;
    unitgroup auto5529A2D7_g;
    int auto5529A2D7_u;
    const int auto1A19BD1D_ae = gv_const_maxdisc;
    const int auto1A19BD1D_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= gv_const_maxdisc; init_i += 1) {
        lv_sort[init_i] = 1;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_purge_activate_FX, true, false);
    TriggerStop(gt_abilcheck_loop);
    TriggerStop(gt_AI_core_loop);
    UnitPauseAll(true);
    BoardDestroy(gv_board);
    lv_i = 1;
    for ( ; ( (auto6EE820DD_ai >= 0 && lv_i <= auto6EE820DD_ae) || (auto6EE820DD_ai < 0 && lv_i >= auto6EE820DD_ae) ) ; lv_i += auto6EE820DD_ai ) {
        lv_ii = 1;
        for ( ; ( (auto57791844_ai >= 0 && lv_ii <= auto57791844_ae) || (auto57791844_ai < 0 && lv_ii >= auto57791844_ae) ) ; lv_ii += auto57791844_ai ) {
            if ((gv_player_stats_kill[lv_i] < gv_player_stats_kill[lv_ii])) {
                lv_sort[lv_i] += 1;
            }

        }
    }
    gv_gameover_flag = true;
    auto0606502F_g = UnitGroup("GhostAcademy", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0606502F_u = UnitGroupCount(auto0606502F_g, c_unitCountAll);
    for (;; auto0606502F_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto0606502F_g, auto0606502F_u);
        if (lv_u == null) { break; }
        UnitKill(lv_u);
    }
    lv_i = gv_const_maxdisc;
    for ( ; ( (auto5AB890F3_ai >= 0 && lv_i <= auto5AB890F3_ae) || (auto5AB890F3_ai < 0 && lv_i >= auto5AB890F3_ae) ) ; lv_i += auto5AB890F3_ai ) {
        lv_ii = 1;
        for ( ; ( (auto8B6EACCD_ai >= 0 && lv_ii <= auto8B6EACCD_ae) || (auto8B6EACCD_ai < 0 && lv_ii >= auto8B6EACCD_ae) ) ; lv_ii += auto8B6EACCD_ai ) {
            if ((PlayerGroupHasPlayer(gv_active_players, lv_ii) == true) && (lv_sort[lv_ii] == lv_i)) {
                auto4F16991B_val = lv_i;
                if (auto4F16991B_val == 1) {
                    lv_txt_th = StringExternal("Param/Value/882FC29E");
                }
                else if (auto4F16991B_val == 2) {
                    lv_txt_th = StringExternal("Param/Value/65A27FCC");
                }
                else if (auto4F16991B_val == 3) {
                    lv_txt_th = StringExternal("Param/Value/8383B6D5");
                }
                else {
                    lv_txt_th = StringExternal("Param/Value/80DFED5B");
                }
                lv_txt = (StringExternal("Param/Value/8EBA2D09") + IntToText(lv_i) + lv_txt_th + StringExternal("Param/Value/286A9CBD") + PlayerName(lv_ii) + StringExternal("Param/Value/E04FF842"));
                lv_txt = (lv_txt + IntToText(gv_player_stats_kill[lv_ii]) + StringExternal("Param/Value/A86E4B9A"));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lv_txt);
                PlayerCreateEffectPoint(lv_ii, "EnergyNovaSet", UnitGetPosition(gv_base_array[lv_ii]));
                auto5529A2D7_g = UnitGroup(null, lv_ii, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto5529A2D7_u = UnitGroupCount(auto5529A2D7_g, c_unitCountAll);
                for (;; auto5529A2D7_u -= 1) {
                    lv_u = UnitGroupUnitFromEnd(auto5529A2D7_g, auto5529A2D7_u);
                    if (lv_u == null) { break; }
                    gf_purge_killunit(lv_u);
                }
                gv_disc.lv_killcount[lv_ii] += gv_player_stats_kill[lv_ii];
                gv_disc.lv_deathcount[lv_ii] += gv_player_stats_death[lv_ii];
                if ((lv_sort[lv_i] == 1)) {
                    gv_disc.lv_wincount[lv_ii] += 1;
                }

                gf_burn(lv_ii);
                Wait(1.0, c_timeReal);
            }

        }
    }
    UnitPauseAll(false);
    Wait(14.0, c_timeReal);
    lv_i = 1;
    for ( ; ( (auto1A19BD1D_ai >= 0 && lv_i <= auto1A19BD1D_ae) || (auto1A19BD1D_ai < 0 && lv_i >= auto1A19BD1D_ae) ) ; lv_i += auto1A19BD1D_ai ) {
        if ((lv_sort[lv_i] == 1)) {
            GameOver(lv_i, c_gameOverVictory, false, false);
        }
        else {
            GameOver(lv_i, c_gameOverTie, false, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_purge_activate_Init () {
    gt_purge_activate = TriggerCreate("gt_purge_activate_Func");
    TriggerAddEventTimer(gt_purge_activate, gv_purge_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: purge_activate_FX
//--------------------------------------------------------------------------------------------------
bool gt_purge_activate_FX_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    int autoAD53DEC3_val;
    unitgroup auto33D7998A_g;
    int auto33D7998A_u;
    playergroup auto87D8BB9A_g;
    int auto87D8BB9A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundSetReverb("Psychotic", 0.0, true, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovie, false);
    SoundPlay(SoundLink("Ghost_NukeExplode", 0), PlayerGroupAll(), 77.0, 0.0);
    SoundPlay(SoundLink("Raven_DefensiveMatrixBirth", 0), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("Artifact_EnergyNova", 0), PlayerGroupAll(), 700.0, 0.0);
    GameSetLighting("CutsceneFadeFromWhiteflash", 0.0);
    GameSetLighting("Valhalla", 10.0);
    autoAD53DEC3_val = gv_purge_type;
    if (autoAD53DEC3_val == 1) {
        libNtve_gf_ShowHideUnit(UnitFromId(37), true);
        libNtve_gf_SendActorMessageToUnit(UnitFromId(37), ("SetScale 1.000000,1.000000,3.000000 7.00000"));
        auto33D7998A_g = UnitGroup("RipFieldGenerator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto33D7998A_u = UnitGroupCount(auto33D7998A_g, c_unitCountAll);
        for (;; auto33D7998A_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(auto33D7998A_g, auto33D7998A_u);
            if (lv_u == null) { break; }
            UnitSetHeight(lv_u, -7.0, 30.0);
        }
    }
    else if (autoAD53DEC3_val == 2) {
    }
    else if (autoAD53DEC3_val == 3) {
        libNtve_gf_SendActorMessageToUnit(UnitFromId(261959662), ("SetScale 200.000000,200.000000,20.000000 7.00000"));
        auto87D8BB9A_g = PlayerGroupActive();
        auto87D8BB9A_var = -1;
        while (true) {
            auto87D8BB9A_var = PlayerGroupNextPlayer(auto87D8BB9A_g, auto87D8BB9A_var);
            if (auto87D8BB9A_var < 0) { break; }
            CameraSetValue(auto87D8BB9A_var, c_cameraValueFieldOfView, 60.0, 70.0, -1, 100.0);
            CameraSetValue(auto87D8BB9A_var, c_cameraValueHeightOffset, 20.0, 70.0, -1, 100.0);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_purge_activate_FX_Init () {
    gt_purge_activate_FX = TriggerCreate("gt_purge_activate_FX_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: rally_cancel
//--------------------------------------------------------------------------------------------------
bool gt_rally_cancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    abilcmd autoC81433EB_val;
    const int auto50E1A659_ae = gv_aI_max_pois;
    int auto50E1A659_var;

    // Variable Initialization
    lv_i = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GhostAcademy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC81433EB_val = EventUnitAbility();
    if (autoC81433EB_val == AbilityCommand("CancelWaypoint", 0)) {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, StringExternal("Param/Value/5F445BE4"));
        gv_rally_flag[lv_i] = false;
    }
    else if (autoC81433EB_val == AbilityCommand("Waypoint", 0)) {
        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaError, StringExternal("Param/Value/359FE8D8"));
        gv_rally_location[lv_i] = EventUnitTargetPoint();
        gv_rally_flag[lv_i] = true;
        UnitGroupIssueOrder(UnitGroup(null, lv_i, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), gv_rally_location[lv_i]), c_orderQueueReplace);
        if ((gv_aI_controller[lv_i] == true)) {
            auto50E1A659_var = 1;
            for ( ; auto50E1A659_var <= auto50E1A659_ae; auto50E1A659_var += 1 ) {
                gv_aI_attack_poi[lv_i][auto50E1A659_var] = gv_rally_location[lv_i];
            }
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_rally_cancel_Init () {
    gt_rally_cancel = TriggerCreate("gt_rally_cancel_Func");
    TriggerAddEventUnitAbility(gt_rally_cancel, null, AbilityCommand("CancelWaypoint", 0), c_unitAbilStageComplete, true);
    TriggerAddEventUnitAbility(gt_rally_cancel, null, AbilityCommand("Waypoint", 0), c_unitAbilStageAll, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_init_Init();
    gt_init_setupmenu_values_Init();
    gt_init_game_Init();
    gt_init_tutorial_Init();
    gt_tutorial_01_Init();
    gt_tutorial_sandbox_Init();
    gt_ui_init_hp_bar_Init();
    gt_ui_refresh_hp_bar_loop_Init();
    gt_ui_refresh_maingame_timer_loop_Init();
    gt_upgrade_detect_Init();
    gt_cloakdrive_upgrade_detect_Init();
    gt_init_constants_Init();
    gt_cloakdrive_event_Init();
    gt_cloakturbine_charged_Init();
    gt_cloakturbine_up_Init();
    gt_cloakturbine_dn_Init();
    gt_HQ_masswarp_Init();
    gt_resistFX_Init();
    gt_relay_setup_Init();
    gt_relay_cancel_Init();
    gt_rift_FX_Init();
    gt_inhibitor_Init();
    gt_inhibited_FX_Init();
    gt_solaris_FX_up_Init();
    gt_solaris_FX_dn_Init();
    gt_solaris_hits_inhibitor_Init();
    gt_postproduction_Init();
    gt_abilcheck_loop_Init();
    gt_spawn_loop_Init();
    gt_tab_press_Init();
    gt_tab_exit_Init();
    gt_zoom_compensate_Init();
    gt_purge_type_Init();
    gt_hide_ui1_Init();
    gt_hide_ui0_Init();
    gt_bholetest_Init();
    gt_empty_Init();
    gt_get_time_Init();
    gt_activate_simulator_Init();
    gt_AI_core_loop_Init();
    gt_AI_anti_AoE_Init();
    gt_AI_tech_unit_timeout_Init();
    gt_AI_evade_reactive_Init();
    gt_exit_Init();
    gt_leaderboard_Init();
    gt_unit_destroyed_Init();
    gt_bgm_sequence_maingame_Init();
    gt_bgm_sequence_tutorial_Init();
    gt_purge_sequence_Init();
    gt_purge_endgame_countdown_Init();
    gt_purge_activate_Init();
    gt_purge_activate_FX_Init();
    gt_rally_cancel_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
